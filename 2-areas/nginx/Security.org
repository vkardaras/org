#+title: Security

* HTTPS
** Why HTTPS Matters

1. Security
2. SEO Benefits

** Obtaining TLS Certificates

Choose a tool and provider based on your environment:

| Tool    | Provider      | Best For                         |
|---------+---------------+----------------------------------|
| Certbot | Let’s Encrypt | Free, automated production certs |
| mkcert  | Self-signed   | Local development and testing    |

*** Let’s Encrypt + Certbot

Certbot is an ACME client that automates issuance and renewal of free TLS certificates from Let’s Encrypt.

#+begin_src shell
sudo apt update
sudo apt install certbot

sudo certbot certonly \
  --standalone \
  --preferred-challenges http \
  -d example.com \
  -d www.example.com
#+end_src

Certificates are saved at:

- =/etc/letsencrypt/live/example.com/fullchain.pem=
- =/etc/letsencrypt/live/example.com/privkey.pem=

*** mkcert (Self-Signed for Local Testing)

mkcert sets up a local CA and issues certificates trusted by your development machine. Not suitable for production.

#+begin_src shell
sudo apt update
sudo apt install mkcert

# Change to your certificates directory
cd /etc/ssl/private

# Install mkcert’s local CA
mkcert --install

# Generate a wildcard certificate for *.example.com
mkcert *.example.com
#+end_src

*** Configuring Nginx for HTTPS

Once you have your certificate and private key, update your Nginx server block to listen on port 443:

#+begin_src conf
server {
    listen 443 ssl;
    server_name honda.cars.com;

    ssl_certificate     /etc/ssl/certs/honda.cars.com.pem;
    ssl_certificate_key /etc/ssl/certs/honda.cars.com-key.pem;

    root  /var/www/honda.cars.com/html;
    index index.html;

    location / {
        try_files $uri $uri/ =404;
    }
}
#+end_src

* Demo HTTPS

** Simple HTTP → HTTPS Redirect

*** Open Port 443 in the Firewall

Verify that TCP port 443 is allowed through UFW:

#+begin_src shell
# If 443/tcp is not listed, enable it:
sudo ufw allow 443/tcp
#+end_src

*** Switch from HTTP-Only to HTTPS

Remove the old HTTP site and enable the HTTPS configuration:

#+begin_src shell

# Disable HTTP site
sudo rm /etc/nginx/sites-enabled/example-http

# List available site configs
ls -l /etc/nginx/sites-available
# Edit the HTTPS site template
sudo vim /etc/nginx/sites-available/example-https

#+end_src

Add the following to =example-https=

#+begin_src conf
server {
    listen 80;
    server_name example.com;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name example.com;

    ssl_certificate     /etc/ssl/certs/example.com.pem;
    ssl_certificate_key /etc/ssl/certs/example.com-key.pem;


    root /var/www/html;
    index index.html index.htm;

    location / {
        try_files $uri $uri/ =404;
    }
}
#+end_src

Enable the site and test Nginx:

#+begin_src shell
sudo ln -s /etc/nginx/sites-available/example-https /etc/nginx/sites-enabled/
sudo nginx -t
#+end_src

*** Generate a Test SSL Certificate with mkcert

#+begin_src shell
cd /etc/ssl/certs
sudo mkcert example.com
#+end_src

Reload Nginx with the new certificates:

#+begin_src shell
sudo nginx -t
sudo nginx -s reload
#+end_src

** HTTPS Reverse Proxy to Apache Backends

*** Configure Nginx Upstream and proxy_pass

Edit =/etc/nginx/sites-available/example-https= to add an =upstream= block:

#+begin_src conf
# Upstream Apache backends on port 443
upstream example {
    server 192.230.210.3:443;
    server 192.230.210.6:443;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name example.com;
    return 301 https://$host$request_uri;
}

# HTTPS listener forwarding to upstream
server {
    listen 443 ssl;
    server_name example.com;

    ssl_certificate     /etc/ssl/certs/example.com.pem;
    ssl_certificate_key /etc/ssl/certs/example.com-key.pem;

    root /var/www/html;
    index index.html index.htm;

    location / {
        proxy_pass https://example;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
#+end_src

Test and reload:

#+begin_src shell
sudo nginx -t
sudo nginx -s reload
#+end_src
* HTTP Headers

** Types of HTTP Headers

HTTP headers are grouped by their roles. Below is a visual overview followed by a summary table.

| Header Category | Purpose                              | Common Example              |
|-----------------+--------------------------------------+-----------------------------|
| General         | Used in both requests and responses  | Connection, Cache-Control   |
| Request         | Sent by clients to servers           | User-Agent, Accept          |
| Response        | Sent by servers back to clients      | Content-Type, Server        |
| Security        | Mitigate web vulnerabilities         | Content-Security-Policy     |
| Authentication  | Verify client identity               | Authorization               |
| Caching         | Control resource caching             | Expires, ETag               |
| CORS            | Enable cross-origin resource sharing | Access-Control-Allow-Origin |
| Proxy           | Convey client info through proxies   | X-Forwarded-For, X-Real-IP  |
| Custom          | Application-specific metadata        | X-Custom-Header             |

** Nginx Built-in Variables

Nginx uses $-prefixed variables to access request and server data dynamically.

Common variables:

- =$remote_addr=: Client IP address
- =$host=: Host header value
- =$scheme=: Protocol (http or https)
- =$request_uri=: Full request URI including query string

** Example Nginx Configuration

#+begin_src conf
server {
    listen       80;
    server_name  honda.cars.com;

    root   /var/www/honda.cars.com/html;
    index  index.html;

    # Security response headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header Content-Security-Policy "default-src 'self'";
    add_header Referrer-Policy "origin";

    location / {
        # Preserve original client headers
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass         http://backend_upstream;
    }
}
#+end_src
* Basic Authentication

** Generate the Password File (=.htpasswd=)

You can create the .htpasswd file with either Apache’s utility or OpenSSL. Store this file in a secure directory (e.g., =/etc/nginx/conf.d/=).

| Method          | Requirement                  | Usage Example           |
|-----------------+------------------------------+-------------------------|
| Apache htpasswd | apache2-utils or httpd-tools | Add users with a prompt |
| OpenSSL         | Built-in on most systems     | Manually append hashes  |

*** Using Apache’s htpasswd

#+begin_src shell

# Install the tool if needed
sudo apt-get install apache2-utils   # Debian/Ubuntu
sudo yum install httpd-tools         # RHEL/CentOS

# Create a new file and add the first user
sudo htpasswd -c /etc/nginx/conf.d/.htpasswd admin
# Add additional users (omit -c to avoid overwriting)
sudo htpasswd /etc/nginx/conf.d/.htpasswd jsmith
# Enter and confirm password

#+end_src

*** Using OpenSSL

#+begin_src shell
# For each user, append "username:" then an APR1-hashed password
sudo sh -c "echo -n 'admin:' >> /etc/nginx/conf.d/.htpasswd"
sudo sh -c "openssl passwd -apr1 >> /etc/nginx/conf.d/.htpasswd"
sudo sh -c "echo -n 'jsmith:' >> /etc/nginx/conf.d/.htpasswd"
sudo sh -c "openssl passwd -apr1 >> /etc/nginx/conf.d/.htpasswd"
# Enter and verify password

# confirm your .htpasswd entries
cat /etc/nginx/conf.d/.htpasswd
# admin:$apr1$egX1fPMK$EXwGqVFsOSBFsQNJMc2iB0
# jsmith:$apr1$L5aCfsuk$XPsXgl1JMTQpd0ihTVyus.
#+end_src

** Configure Nginx to Require Authentication

Edit your server block (commonly in =/etc/nginx/sites-available/= or =/etc/nginx/conf.d/=) to protect a specific location, such as =/admin=:

#+begin_src conf
server {
    listen 80;
    server_name example.com www.example.com;

    root /var/www/example.com/html;
    index index.html;

    location /admin {
        auth_basic           "Restricted Content";
        auth_basic_user_file /etc/nginx/conf.d/.htpasswd;
    }
}
#+end_src

- auth_basic: Text shown in the browser’s login dialog.
- auth_basic_user_file: Path to your =.htpasswd= file.

** Demo Nginx Configuration

#+begin_src conf
server {
    listen 80;
    server_name example.com;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name example.com;

    ssl_certificate     /etc/ssl/certs/example.com.pem;
    ssl_certificate_key /etc/ssl/certs/example.com-key.pem;
    root                /var/www/html;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header Content-Security-Policy "default-src 'self'";
    add_header Referrer-Policy origin;

    index index.html index.htm index.nginx-debian.html;

    # Public content
    location / {
        try_files $uri $uri/ =404;
    }

    # Protect /admin with HTTP Basic Auth
    location /admin {
        auth_basic           "Restricted Access";
        auth_basic_user_file /etc/nginx/conf.d/.htpasswd;
    }
}
#+end_src
* Blocking Traffic

** Restricting Access by IP in Nginx

Nginx’s HTTP Access module uses two directives—allow and deny—to control client access at the server or location level.

| Directive | Description                              | Example               |
|-----------+------------------------------------------+-----------------------|
| allow     | Grants access to a specific IP or subnet | allow 192.168.1.0/24; |
| deny      | Blocks access from an IP or subnet       | deny 203.0.113.0/24;  |

Example: Allow Only Two IPs, Block Everything Else

#+begin_src conf
server {
    listen 80;
    server_name example.com www.example.com;
    root /var/www/example.com/html;
    index index.html;

    # Permit two individual IPs
    allow 192.168.1.100/32;
    allow 174.0.252.8/32;
    deny all;

    location / {
        try_files $uri $uri/ =404;
    }
}
#+end_src

Example: Deny a Subnet Globally, Allow a Subnet to /admin

#+begin_src conf
server {
    listen 80;
    server_name example.com www.example.com;
    root /var/www/example.com/html;
    index index.html;

    # Block the entire 203.0.113.0/24 network site-wide
    deny 203.0.113.0/24;

    location /admin {
        # Only allow 174.0.252.0/24 to access /admin
        allow 174.0.252.0/24;
        deny all;
        try_files $uri $uri/ =404;
    }
}
#+end_src

- =/32= mask = single IPv4 address
- =/24= mask = range of IPv4 address
- =deny all;= blocks every other client

** Automated protection using [[https://github.com/fail2ban/fail2ban][Fail2Ban]].

Fail2Ban monitors logs for repeated failures or suspicious patterns, then automatically bans the offending IP for a configurable duration.

#+begin_src shell
$ sudo tail -f /var/log/fail2ban.log
2024-08-10 19:26:27,469 fail2ban.jail   [7786]: INFO    Creating new jail 'ssh'
2024-08-10 19:26:27,473 fail2ban.filter [7786]: INFO    maxRetry: 2
...
2024-08-10 19:27:40,771 fail2ban.actions: NOTICE  [ssh] Ban 192.168.8.131
#+end_src

*** Installing Fail2Ban

#+begin_src shell

# On Ubuntu/Debian:
sudo apt update
sudo apt install fail2ban

# On Red Hat/CentOS:
sudo yum install fail2ban

#+end_src

*** Configuring Jails

Copy the default jail.conf to jail.local and enable only the jails you need:

#+begin_src shell
cd /etc/fail2ban
sudo cp jail.conf jail.local
sudo vim jail.local
#+end_src


#+begin_src toml

# Protecting Nginx HTTP Authentication
[nginx-http-auth]
enabled  = true
port     = http,https
filter   = nginx-http-auth
logpath  = /var/log/nginx/access.log
maxretry = 3
findtime = 600
bantime  = 600

# Blocking Bad Bots
[nginx-badbots]
enabled  = true
port     = http,https
filter   = nginx-badbots
logpath  = /var/log/nginx/access.log
maxretry = 1
bantime  = 48h

# Rate Limiting Excessive Requests
[nginx-limit-req]
enabled  = true
port     = http,https
filter   = nginx-limit-req
logpath  = /var/log/nginx/access.log
maxretry = 10
findtime = 3600
bantime  = 24h
#+end_src

*** Built-in Filters

Filters are stored in /etc/fail2ban/filter.d. Common patterns include Nginx, SSH, and more

#+begin_src shell
$ ls -l /etc/fail2ban/filter.d
-rw-r--r-- 1 root root  474 Nov  9 2022 nginx-bad-request.conf
-rw-r--r-- 1 root root  740 Nov  9 2022 nginx-botsearch.conf
-rw-r--r-- 1 root root 1048 Nov  9 2022 nginx-http-auth.conf
-rw-r--r-- 1 root root 1513 Nov  9 2022 nginx-limit-req.conf
#+end_src

*** Checking Status and Unbanning

#+begin_src shell

# View a jail’s status:
sudo fail2ban-client status nginx-http-auth

# Unban an IP if needed:
sudo fail2ban-client set nginx-http-auth unbanip 108.172.85.62

#+end_src
