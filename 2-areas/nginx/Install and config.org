#+title: Install And Config

* Overview

#+begin_src shell
# main configuration file
/etc/nginx/nginx.conf
#+end_src

** nginx.conf Structure

- *Global settings*
  Define user permissions, worker processes, PID file location, compression, caching, and more.

- *events block*
  Controls Nginx’s event model and the maximum number of simultaneous connections per worker.

- *http block*
  Contains HTTP directives for logging, timeouts, compression, MIME types, and includes for server blocks.

- *server block*
  Configures how Nginx responds to requests for specific domain names or IP addresses (virtual hosts).

** Global Settings, Events, and HTTP Blocks

#+begin_src conf
user www-data;
worker_processes auto;
pid /run/nginx.pid;


events {
    worker_connections 1024;
}


http {
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    gzip            on;


    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';


    include /etc/nginx/mime.types;
    default_type application/octet-stream;


    # Include virtual host definitions
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
#+end_src

*Key directives explained:*

- =user=
  System user for Nginx worker processes (e.g., www-data on Debian/Ubuntu).
- *worker_processes*
  Number of worker processes—auto matches CPU cores.
- =pid=
  Path to the master process PID file.
- =events → worker_connections=
  Maximum simultaneous connections each worker can handle.
- =http=
  Configures HTTP-level settings: compression (gzip), timeouts, logging formats, MIME types, and includes server blocks.

** Server Blocks (Virtual Hosts)

Basic HTTP Server Block
#+begin_src conf
server {
    listen 80;
    server_name example.com www.example.com;


    root /var/www/example.com/html;
    index index.html;


    location / {
        try_files $uri $uri/ =404;
    }
}
#+end_src

*Directive breakdown:*

- =listen=
  Port for incoming traffic (80 for HTTP, 443 for HTTPS).
- =server_name=
  Domain names or IP addresses handled by this block.
- =root=
  Path to the website’s document root.
- =index=
  Default file(s) served when a directory is requested.
- =location /=
  URI matching; try_files checks for existing files or directories and returns a 404 if not found.

** Nginx Directory Structure

| Path                        | Description                                                   |
|-----------------------------+---------------------------------------------------------------|
| /etc/nginx/nginx.conf       | Main configuration file                                       |
| /etc/nginx/sites-available/ | Store individual server block files                           |
| /etc/nginx/sites-enabled/   | Symbolic links to enabled sites from sites-available          |
| /etc/nginx/conf.d/          | Additional configuration snippets (e.g., SSL, load balancing) |
| /var/www/...                | Default web content roots (Debian/Ubuntu)                     |
| /usr/share/nginx/html       | Default web root (RHEL/CentOS)                                |
| /etc/nginx/mime.types       | MIME type definitions                                         |
| /run/nginx.pid              | PID file location                                             |
| /var/log/nginx/             | Access and error logs                                         |

** Essential Nginx Commands

#+begin_src shell

# Display help and available options
nginx -h

# Show Nginx version
nginx -v

# Show version and compile-time options
nginx -V

# Check configuration syntax and validity
nginx -t

# Dump complete configuration for review
nginx -T

# Reload configuration without downtime
nginx -s reload

# Graceful shutdown
nginx -s stop

# Immediate shutdown
nginx -s quit

# Reopen log files
nginx -s reopen

# Reload using systemd (graceful)
sudo systemctl reload nginx

# Restart Nginx (brief downtime possible)
sudo systemctl restart nginx

# Check Nginx service status
sudo systemctl status nginx

#+end_src


* Install & config

** APT (Advanced Package Tool)

#+begin_src shell

# install Nginx
sudo apt install nginx

# manage the Nginx Service
sudo systemctl status nginx

# start Nginx and confirm it’s running
sudo systemctl start nginx
sudo systemctl status nginx

# test with curl command
curl localhost

# view Nginx Logs
cd /var/log/nginx
ll

#+end_src

* Demo First Website with Nginx

** Verify and Start Nginx

#+begin_src shell
sudo systemctl status nginx
sudo systemctl start nginx
curl http://localhost
#+end_src

** Create a New Site Configuration

#+begin_src shell

# switch to the Nginx configuration directory and assume root privileges
cd /etc/nginx
sudo su

# copy the default server block to a new file named `helloworld`
cd sites-available
cp default helloworld

#+end_src

Open sites-available/helloworld in your preferred editor and replace its contents

#+begin_src conf
server {
    listen 80;
    server_name helloworld.com;


    root /var/www/helloworld;
    index index.html index.htm;


    location / {
        try_files $uri $uri/ =404;
    }
}
#+end_src


| Directive   | Purpose                                            |
|-------------+----------------------------------------------------|
| listen 80;  | Accept HTTP requests on port 80                    |
| server_name | Match the Host header to helloworld.com            |
| root        | Define the document root for this virtual host     |
| index       | Specify default files to serve                     |
| try_files   | Serve requested files or return a 404 if not found |

** Create the Site Content

Create the document root and add a simple HTML page:

#+begin_src shell
mkdir -p /var/www/helloworld
cat > /var/www/helloworld/index.html <<EOF
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Hello World</title>
</head>
<body>
  <h1>Hello World!</h1>
  <p>Your Nginx web server is now serving custom content.</p>
</body>
</html>
EOF
#+end_src

** Enable the Site and Reload Nginx

#+begin_src shell

# create a symbolic link in sites-enabled
ln -s /etc/nginx/sites-available/helloworld /etc/nginx/sites-enabled/

# test the syntax and reload Nginx
nginx -t
nginx -s reload

#+end_src

** Test Your Hello World Site

#+begin_src shell
# view the default site
curl http://localhost

# view the custom site without DNS
curl --header "Host: helloworld.com" http://localhost

#+end_src
* Firewall & Ports

** Built-In Firewalls Across Operating Systems
- Debian & Ubuntu (UFW)
- Red Hat & Fedora (firewalld)

** Common ports

|------+---------+-------------------------|
| Port | Service | Description             |
|------+---------+-------------------------|
|   80 | HTTP    | Unencrypted web traffic |
|  443 | HTTPS   | Encrypted web traffic   |
|   22 | SSH     | Secure shell access     |
|   25 | SMTP    | Email delivery          |
|   53 | DNS     | Domain name resolution  |

** Managing UFW on Debian/Ubuntu

#+begin_src shell

# allow SSH first to prevent lockout
sudo ufw allow 22/tcp

# enable UFW
sudo ufw enable

# Open HTTP and HTTPS
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp

# reload to apply
sudo ufw reload

# view rules with indices:
sudo ufw status numbered

# delete a specific rule
sudo ufw delete <rule-number>

#+end_src

** Managing firewalld on Red Hat/Fedora

#+begin_src shell

# install (if needed)
sudo yum update && sudo yum install firewalld

# start and enable at boot
sudo systemctl start firewalld
sudo systemctl enable firewalld

# open port permanently (e.g., HTTP)
sudo firewall-cmd --permanent --add-port=80/tcp
sudo firewall-cmd --reload

# remove a port
sudo firewall-cmd --permanent --remove-port=80/tcp
sudo firewall-cmd --reload

# check active zones and ports
sudo firewall-cmd --list-all

#+end_src

** Inspecting Open Ports with netstat

=netstat= lists active connections and listening ports. Install it if missing

#+begin_src shell

# Debian/Ubuntu
sudo apt update
sudo apt install net-tools

# Red Hat/Fedora/CentOS
sudo yum install net-tools

# run
sudo netstat -nltup

#+end_src
