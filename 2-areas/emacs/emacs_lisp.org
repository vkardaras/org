#+title: Emacs Lisp

* emacs basics
** Define a function

Define a function witn the =defun= keyword

#+begin_src elisp
(defun my-next-15-lines ()
  "Move to the next 15 lines."
  (interactive)
  (forward-line 15))

(defun my-previous-15-lines ()
  "Move to the next 15 lines."
  (interactive)
  (forward-line -15))

#+end_src

** Define key bindins for the custom commands

#+begin_src elisp
(define-key global-map (kbd "C-S-n") #'my-next-15-lines)

(define-key global-map (kbd "C-S-p") #'my-previous-15-lines)

#+end_src

** Define a variable

#+begin_src elisp
(defvar my-first-toggle t
  "if non-nil, do stuff.")
#+end_src

** Conditional statements

#+begin_src elisp
(if my-first-toggle
    (message "It is true")
  (message "It is not true"))
#+end_src

** Evaluate elisp code
=C-x C-e=

*** Evaluate elisp code in the scratch buffer and return the value of the expression
=C-j=

** Define a function with optional argument and conditional statement

#+begin_src elisp
(defun my-next-or-prev-15-lines (&optional arg)
  "Mov to the next or previous 15 lines.
With optional prefix ARG, move to the next lines. Else to the
previous ones."
  (interactive "P")
  (if arg
      (my-next-15-lines)
    (my-previous-15-lines)))
#+end_src

=(interactive "P")= represents the =C-u= prefix argument, which is the universal argument

* define prefix/leader key (nested key maps)

Define a function
#+begin_src elisp
(defun test-command ()
  (interactive)
  (message "this is a test"))
#+end_src

Create a key binding to call the function
#+begin_src elisp
;; from emacs 29 and above
(keymap-set global-map "C-t" 'test-command)

;; before emacs 29
(define-key global-map (kbd "C-t") 'test-command)

;; define keybind in a package
(use-package PACKAGE
  :bind ("C-t" . test-command))
#+end_src

** Define and call a keymap

Define a sub-keymap
#+begin_src elisp
(defvar-keymap my-test-prefix-buffer-map
  :doc "My prefix map for buffers"
  "s" #'switch-to-buffer
  "b" #'buffer-menu)
#+end_src

Define a keymap
#+begin_src elisp
(defvar-keymap my-test-prefix-map
  :doc "My prefix map"
  "f" 'find-file
  "b" my-test-prefix-buffer-map
  "d" 'dired
  "t" 'test-command)
#+end_src

Call the keymap
#+begin_src elisp
(keymap-set global-map "C-t" 'my-test-prefix-map)
#+end_src
