* Creating an Application Image

** Dockerfile Instructions

#+begin_src shell
FROM            node:alpine
LABEL           author="John Doe"
ENV           NODE_ENV=production
WORKDIR       /var/www
COPY            . .
RUN           npm install
EXPOSE        3000
ENTRYPOINT  ["node", "server.js"]
#+end_src

** Create a custom application Dockerfile

Download the following repo
[[https://github.com/danwahlin/NodeExpressMongoDBDockerApp]]

#+begin_src shell
FROM            node:alpine

LABEL           author="John Doe"

ENV           NODE_ENV=production
ENV         PORT=3000

WORKDIR       /var/www
COPY            package.json package-lock.json ./
RUN         npm install

COPY            . ./
EXPOSE      $PORT

ENTRYPOINT  ["npm", "start"]
#+end_src

on .dockerignore there are the files and directories we don't wont to be
included in a copy command

#+begin_src shell
node_modules
#+end_src

** Using docker build

Build a custom image

#+begin_src shell
docker build -t <registry>/<name>:<tag> .

docker build -t vkardaras/nodeapp:1.0 .
#+end_src

List docker images

#+begin_src shell
docker images
#+end_src

Remove an image

#+begin_src shell
docker rmi <imageId>
#+end_src

** Build a custom application image

#+begin_src shell
docker build -t nodeapp .
#+end_src

If the Dockerfile has another name e.g. node.dockerfile, you have to
specify it.

#+begin_src shell
docker build -t nodeapp -f node.dockerfile .
#+end_src

Build the image using user's dockerhub name

#+begin_src shell
docker build -t vkardaras/nodeapp:1.0 -f node.dockerfile .
#+end_src

Deploy an image to Docker Hub

#+begin_src shell
docker push <username>/<imagename>:<tag>

docker push vkardaras/nodeapp:1.0
#+end_src

Pull an image from docker hub

#+begin_src shell
docker pull vkardaras/nodeapp:1.0
#+end_src

** Run an application container

Running a container

#+begin_src shell
docker run -p <externalPort>:<internalPort> <imageName>
#+end_src

First, pull an image

#+begin_src shell
docker pull nginx:alpine
#+end_src

After run the image in detached mode

#+begin_src shell
docker run -p 8080:80 -d nginx:alpine
#+end_src

List running containers

#+begin_src shell
docker ps
#+end_src

The output will be similar to this

#+begin_src shell
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                                   NAMES
6b29f8606802   nginx:alpine   "/docker-entrypoint.…"   49 seconds ago   Up 48 seconds   0.0.0.0:8080->80/tcp, :::8080->80/tcp   pedantic_benz
#+end_src

Stop a running container

#+begin_src shell
docker stop 6b2
#+end_src

Remove a container

#+begin_src shell
docker rm 6b2
#+end_src

** View container logs

First run the container

#+begin_src shell
docker run -p 3000:3000 -d vkardaras/nodeapp:1.0
#+end_src

View the logs of a container

#+begin_src shell
docker logs fa
#+end_src

** Using container volumes

Creating a container volume

#+begin_src shell
docker run -p <ports> -v /var/www/logs <imageToRun>

docker run -p <ports> -v $(pwd)/logs:/var/www/logs <imageToRun>

# $(pwd) → print working directory
# /var/www/logs → Data in the folder should be stored on the container host
#+end_src

** Communicate between multiple containers.

Create a Bridge Network

#+begin_src shell
docker network create --driver bridge <networkName>
#+end_src

Key docker network commands

#+begin_src shell
docker network create

docker network ls

docker network rm
#+end_src

Create a custom bridge network and add containers into it

#+begin_src shell
docker network create --driver bridge isolated_network
#+end_src

Running a database container in a network

#+begin_src shell
docker run -d --net=isolated_network --name=mongodb mongo
#+end_src

Running an app container in a network

#+begin_src shell
docker run -d --net=isolated_network --name=nodeapp -p 3000:3000 -v $(pwd)/logs:/var/www/logs vkardaras/nodeapp
#+end_src

Inspect a network

#+begin_src shell
docker network inspect 236
#+end_src

Shell into a container

#+begin_src shell
docker exec it <containerId> sh
#+end_src

Shell into the nodeapp container

#+begin_src shell
docker exec -it nodeapp sh
#+end_src

Execute a file in the container to populate the database

#+begin_src shell
node dbSeeder.js
#+end_src

** Building and running multiple containers with docker-compose

Key docker-compose commands

#+begin_src shell
docker-compose build
docker-compose up
docker-compose down
#+end_src

Example of docker-compose file

#+begin_src yaml
version: '3.7'

services:

  node:
    container_name: nodeapp
    image: nodeapp
    build:
      context: .
      dockerfile: node.dockerfile
      args:
        PACKAGES: "nano wget curl"
    ports:
      - "3000:3000"
    networks:
      - nodeapp-network
    volumes:
      - ./logs:/var/www/logs
    environment:
      - NODE_ENV=production
      - APP_VERSION=1.0
    depends_on: 
      - mongodb
      
  mongodb:
    container_name: mongodb
    image: mongo
    networks:
      - nodeapp-network

networks:
  nodeapp-network:
    driver: bridge
#+end_src

Build the file

#+begin_src yaml
docker-compose build
#+end_src

Run the containers from docker compose

#+begin_src yaml
docker-compose up
#+end_src

Stop the containers

#+begin_src yaml
docker-compose down
#+end_src
