* Running Multi-container Java applications with docker compose

Run a docker container with postgres in command line

#+begin_src shell
$ docker run -it --rm \
> -p 5432:5432 \
> -e POSTGRES_PASSWORD=1234 \
> -e POSTGRES_DB=bookdb \
> -v $(pwd)/db:/var/lib/postgresql/data \
> postgres
#+end_src

** Setting up a Docker network

*** Network Drivers

- Bridge
  - The default network driver
  - Creates a private local network
- Host
  - Removes the isolation between the Docker host and the containers
- Overlay
  - Connects multiple Docker engines
- IPvlan
  - Gives total control over IPv4 and IPv6 addressing
- Macvlan
  - Gives containers a MAC address
- None
  - Disables all networking functions in a container

*** Docker Network Command Options

- create - Creates a network
- ls - Lists networks
- inspect - Displays detailed information of one or more networks
- connect - Manually connects a container to a network
- disconnect - Disconnects a container from a network
- rm - Removes one or more networks
- prune - Removes unused networks

** Using Docker Compose

*** Docker Compose configuration

#+begin_src shell
version: '3.9' # Optional
services:
  db:
    image: postgres
    ports:
      - 5432:5432
    environment
      - POSTGRES_PASSSWORD=password
#+end_src

*** Docker Compose configuration (build)

#+begin_src shell
version: '3.9' # Optional
services:
  db:
    image: postgres
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 5432:5432
    environment
      - POSTGRES_PASSSWORD=password
#+end_src

*** Docker Compose configuration (depends_on)

#+begin_src shell
version: '3.9' # Optional
services:
  db:
    image: postgres
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 5432:5432
    environment
      - POSTGRES_PASSSWORD=password
  app:
    image: my-app
    depends_on: 
      - db
#+end_src

Check if the dependent service is completely initialized so the first
one can start without errors

#+begin_src shell
version: '3.9' # Optional
services:
  db:
    image: postgres
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 5432:5432
    environment
      - POSTGRES_PASSSWORD=password
  app:
    image: my-app
    depends_on: 
      db:
        condition: service_healthy
#+end_src

condition values

- service_healthy
- service_started
- service_completed_successfully

*** Docker Compose configuration (optional sections)

#+begin_src shell
version: '3.9' # Optional
services:
  db:
    image: postgres
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 5432:5432
    environment
      - POSTGRES_PASSSWORD=password

volumes:
networks:  
#+end_src

*** Docker Compose configuration (volumes)

#+begin_src shell
version: '3.9' # Optional
services:
  db:
    image: postgres
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 5432:5432
    environment
      - POSTGRES_PASSSWORD=password
    volumes
      - ./db:/var/lib/postgresql/data
      - data_volume:/my-dir

volumes:
  data_volume: 
#+end_src

*** Docker Compose configuration (networks)

By default compose a bridged network for all services defined in the
file

1. Specify the name of an existing network to be used

#+begin_src shell
version: '3.9' # Optional
services:
  db:
    image: postgres
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 5432:5432
    environment
      - POSTGRES_PASSSWORD=password
    volumes
      - ./db:/var/lib/postgresql/data

networks:
  default: 
    external: 
      name: existing_network
#+end_src

1. Create a new network in the file

#+begin_src shell
version: '3.9' # Optional
services:
  db:
    image: postgres
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 5432:5432
    environment
      - POSTGRES_PASSSWORD=password
    volumes
      - ./db:/var/lib/postgresql/data
    networks
      - my_network

networks:
  my_network:
#+end_src

*** Demo

#+begin_src shell
networks:
  web-db-compose:

services:
  web-app:
    image: web-app-db
    build:
      context: .
      dockerfile: web.Dockerfile
    ports:
      - 8080:8080
    networks
      - web-db-compose
    depends_on: 
      db:
        condition: service_healthy
  db:
    image: postgres
    environment
      - POSTGRES_PASSSWORD=password
      - POSTGRES_DB=bookdb
    volumes
      - ./db:/var/lib/postgresql/data
    networks
      - web-db-compose
    healthcheck
      test: ["CMD-SHELL". "pg_isready -U postgres -d bookdb"]
      interval: 15s
      retries: 5
      start_period: 10s
#+end_src

** Managing Docker Compose services

Commands to work with Docker Compose

- docker-compose [subcommand] # version 1
- docker compose [subcommand] # version 2

*** Important Docker Compose commands

- build - Builds services using a Dockerfile
- config - Validates a Compose file
- up - Builds, creates, and starts containers for a service
- down - Stops and removes containers, networks, volumes, and images
  created by up
- start - Starts existing containers for a service
- stop - Stops running containers without removing them
- ps - Lists containers
- top - Displays running processes
- kill - Forces running containers to stop

Validate a docker-compose file

#+begin_src shell
$ docker compose config
#+end_src

Validate a docker-compose file and silence the output

#+begin_src shell
$ docker compose config -q
#+end_src

Build the images defined in the file

#+begin_src shell
$ docker compose build
#+end_src

Create and start

#+begin_src shell
$ docker compose up
#+end_src

Build the images before starting the containers

#+begin_src shell
$ docker compose up --build
#+end_src

Create and run containers in the background

#+begin_src shell
$ docker compose up -d
#+end_src

Start the containers manually

#+begin_src shell
$ docker compose start
#+end_src

Stop and remove the containers and network

#+begin_src shell
$ docker compose down
#+end_src

Stop and remove the containers and network, also remove the images

#+begin_src shell
$ docker compose down --rmi all
#+end_src
