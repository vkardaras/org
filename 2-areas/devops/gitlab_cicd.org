#+title: Gitlab Cicd

* Example pipeline with artifact

#+begin_src yaml
stages:
    - build
    - test

build:
    stage: build
    script:
        - echo "Building"
        - mkdir build
        - touch build/info.txt
    artifacts:
        paths:
            - build/

test:
    stage: test
    script:
        - echo "Testing"
        - test -f "build/info.txt"
#+end_src

Test if a file exists
#+begin_src shell
test -f build/info.txt
#+end_src

* Demo project example

Project link
https://gitlab.com/vkardaras/learn-gitlab-app

* Continuous Integration
** Example pipeline
#+begin_src yaml
sstages:
  - build
  - test
  - unit

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: unit
  script:
    - npm ci
    - npm testtages:
  - build
#+end_src

** Run jobs in parallel
#+begin_src yaml
stages:
  - build
  - test

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
#+end_src

** Publish a JUnit report with artifact
#+begin_src yaml
stages:
  - build
  - test

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml
#+end_src

** Configure a code linter
#+begin_src yaml
stages:
  - build
  - test

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

eslint:
  image: node:22-alpine
  script:
    - npm ci
    - npm run lint
  artifacts:
    reports:
      codequality: gl-codequality.json
#+end_src

* Continuous Deployment
** Install Netlify
#+begin_src yaml
stages:
  - build
  - test

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify:
  image: node:22-alpine
  stage: .pre
  script:
    - npm install -g netlify-cli@20.1.1
    - netlify --version
#+end_src

** Store project configuration in environment variables
#+begin_src yaml
stages:
  - build
  - test

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify:
  image: node:22-alpine
  stage: .pre
  variables:
    NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  script:
    - npm install -g netlify-cli@20.1.1
    - netlify --version
    - echo "Deploying to site id $NETLIFY_SITE_ID"
#+end_src

** Deploy to production
#+begin_src yaml
stages:
  - build
  - test
  - deploy

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify:
  image: node:22-alpine
  stage: deploy
  variables:
    NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  script:
    - npm install -g netlify-cli@20.1.1
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
#+end_src

** Conditional job execution with rules
#+begin_src yaml
stages:
  - build
  - test
  - deploy

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify:
  image: node:22-alpine
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  script:
    - npm install -g netlify-cli@20.1.1
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
#+end_src

** Scripts: before_script and after_script
#+begin_src yaml
stages:
  - build
  - test
  - deploy

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify:
  image: node:22-alpine
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl 'https://ocd-learn-gitlab.netlify.app' | grep 'GitLab'
#+end_src

** Deploy to the staging environment
#+begin_src yaml
variables:
  NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'

stages:
  - build
  - test
  - deploy_staging
  - deploy_prod

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify_staging:
  image: node:22-alpine
  stage: deploy_staging
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --alias staging --dir build
    - curl 'https://staging--ocd-learn-gitlab.netlify.app' | grep 'GitLab'

netlify_prod:
  image: node:22-alpine
  stage: deploy_prod
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl 'https://ocd-learn-gitlab.netlify.app' | grep 'GitLab'
#+end_src

** Manual approval step before deploying to production
#+begin_src yaml
netlify_prod:
  image: node:22-alpine
  stage: deploy_prod
  when: manual
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl 'https://ocd-learn-gitlab.netlify.app' | grep 'GitLab'
#+end_src
