#+title: Gitlab Cicd

* Example pipeline with artifact

#+begin_src yaml
stages:
    - build
    - test

build:
    stage: build
    script:
        - echo "Building"
        - mkdir build
        - touch build/info.txt
    artifacts:
        paths:
            - build/

test:
    stage: test
    script:
        - echo "Testing"
        - test -f "build/info.txt"
#+end_src

Test if a file exists
#+begin_src shell
test -f build/info.txt
#+end_src

* Demo project example

Project link
https://gitlab.com/vkardaras/learn-gitlab-app

* Continuous Integration
** Example pipeline
#+begin_src yaml
sstages:
  - build
  - test
  - unit

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: unit
  script:
    - npm ci
    - npm testtages:
  - build
#+end_src

** Run jobs in parallel
#+begin_src yaml
stages:
  - build
  - test

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
#+end_src

** Publish a JUnit report with artifact

https://docs.gitlab.com/ci/yaml/#artifactsreports

#+begin_src yaml
stages:
  - build
  - test

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml
#+end_src

** Configure a code linter

https://docs.gitlab.com/ci/testing/code_quality/#eslint

#+begin_src yaml
stages:
  - build
  - test

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

eslint:
  image: node:22-alpine
  script:
    - npm ci
    - npm run lint
  artifacts:
    reports:
      codequality: gl-codequality.json
#+end_src

* Continuous Deployment
** Install Netlify
#+begin_src yaml
stages:
  - build
  - test

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify:
  image: node:22-alpine
  stage: .pre
  script:
    - npm install -g netlify-cli@20.1.1
    - netlify --version
#+end_src

** Store project configuration in environment variables
#+begin_src yaml
stages:
  - build
  - test

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify:
  image: node:22-alpine
  stage: .pre
  variables:
    NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  script:
    - npm install -g netlify-cli@20.1.1
    - netlify --version
    - echo "Deploying to site id $NETLIFY_SITE_ID"
#+end_src

** Deploy to production
#+begin_src yaml
stages:
  - build
  - test
  - deploy

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify:
  image: node:22-alpine
  stage: deploy
  variables:
    NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  script:
    - npm install -g netlify-cli@20.1.1
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
#+end_src

** Conditional job execution with rules

https://docs.gitlab.com/ci/yaml/#rules

#+begin_src yaml
stages:
  - build
  - test
  - deploy

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify:
  image: node:22-alpine
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  script:
    - npm install -g netlify-cli@20.1.1
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
#+end_src

** Scripts: before_script and after_script
#+begin_src yaml
stages:
  - build
  - test
  - deploy

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify:
  image: node:22-alpine
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl 'https://ocd-learn-gitlab.netlify.app' | grep 'GitLab'
#+end_src

** Deploy to the staging environment
#+begin_src yaml
variables:
  NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'

stages:
  - build
  - test
  - deploy_staging
  - deploy_prod

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify_staging:
  image: node:22-alpine
  stage: deploy_staging
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --alias staging --dir build
    - curl 'https://staging--ocd-learn-gitlab.netlify.app' | grep 'GitLab'

netlify_prod:
  image: node:22-alpine
  stage: deploy_prod
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl 'https://ocd-learn-gitlab.netlify.app' | grep 'GitLab'
#+end_src

** Manual approval step before deploying to production
#+begin_src yaml
netlify_prod:
  image: node:22-alpine
  stage: deploy_prod
  when: manual
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl 'https://ocd-learn-gitlab.netlify.app' | grep 'GitLab'
#+end_src

** Creating review environments

https://docs.gitlab.com/ci/review_apps/

#+begin_src yaml
variables:
  NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'

stages:
  - build
  - test
  - deploy_review
  - deploy_staging
  - deploy_prod

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify_review:
  image: node:22-alpine
  stage: deploy_review
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --dir build

netlify_staging:
  image: node:22-alpine
  stage: deploy_staging
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --alias staging --dir build
    - curl 'https://staging--ocd-learn-gitlab.netlify.app' | grep 'GitLab'

netlify_prod:
  image: node:22-alpine
  stage: deploy_prod
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl 'https://ocd-learn-gitlab.netlify.app' | grep 'GitLab'
#+end_src

** Merge request pipeline vs Branch pipeline

https://medium.com/devops-with-valentine/fix-gitlab-ci-duplicate-pipelines-in-merge-requests-when-using-rules-9a1486994f3a
https://docs.gitlab.com/ci/pipelines/merge_request_pipelines/
https://docs.gitlab.com/ci/yaml/workflow/

#+begin_src yaml
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

variables:
  NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'

stages:
  - build
  - test
  - deploy_review
  - deploy_staging
  - deploy_prod

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify_review:
  image: node:22-alpine
  stage: deploy_review
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --dir build

netlify_staging:
  image: node:22-alpine
  stage: deploy_staging
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --alias staging --dir build
    - curl 'https://staging--ocd-learn-gitlab.netlify.app' | grep 'GitLab'

netlify_prod:
  image: node:22-alpine
  stage: deploy_prod
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl 'https://ocd-learn-gitlab.netlify.app' | grep 'GitLab'
#+end_src

** Parse CLI response data (w/ jq JSON parser)

https://jqlang.org/

#+begin_src yaml
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

variables:
  NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'

stages:
  - build
  - test
  - deploy_review
  - deploy_staging
  - deploy_prod

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify_review:
  image: node:22-alpine
  stage: deploy_review
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl jq
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --dir build --json | tee deploy-result.json
    - REVIEW_URL=$(jq -r '.deploy_url' deploy-result.json)
    - echo $REVIEW_URL
    - curl $REVIEW_URL | grep 'GitLab'

netlify_staging:
  image: node:22-alpine
  stage: deploy_staging
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --alias staging --dir build
    - curl 'https://staging--ocd-learn-gitlab.netlify.app' | grep 'GitLab'

netlify_prod:
  image: node:22-alpine
  stage: deploy_prod
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl 'https://ocd-learn-gitlab.netlify.app' | grep 'GitLab'
#+end_src

** Define dynamic environments

https://docs.gitlab.com/ci/variables/predefined_variables/
https://docs.gitlab.com/ci/environments/#set-a-dynamic-environment-url
https://docs.gitlab.com/ci/yaml/artifacts_reports/#artifactsreportsdotenv

#+begin_src yaml
netlify_review:
  image: node:22-alpine
  stage: deploy_review
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  environment:
    name: preview/$CI_COMMIT_REF_SLUG 
    url: $REVIEW_URL
  before_script: 
    - npm install -g netlify-cli
    - apk add curl jq
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --dir build --json | tee deploy-result.json
    - REVIEW_URL=$(jq -r '.deploy_url' deploy-result.json)
    - echo $REVIEW_URL
    - curl $REVIEW_URL | grep 'GitLab'
    - echo "REVIEW_URL=$REVIEW_URL" > deploy.env
    - cat deploy.env
  artifacts:
    reports:
      dotenv: deploy.env
#+end_src

** Define static environments

https://docs.gitlab.com/ci/environments/

#+begin_src yaml
netlify_staging:
  image: node:22-alpine
  stage: deploy_staging
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  environment:
    name: staging
    url: 'https://staging--vdespa5-learn-gitlab.netlify.app/'
  before_script: 
    - npm install -g netlify-cli
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --alias staging --dir build
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'

netlify_prod:
  image: node:22-alpine
  stage: deploy_prod
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  # Specify the environment url from gitlab interface
  environment: production
  before_script: 
    - npm install -g netlify-cli
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'
#+end_src

** Pass data between jobs with environment variables

The environment =$REVIEW_URL= is available to e2e stage because of the artifact in netlify_review stage

#+begin_src yaml
netlify_review:
  image: node:22-alpine
  stage: deploy_review
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  environment:
    name: preview/$CI_COMMIT_REF_SLUG 
    url: $REVIEW_URL
  before_script: 
    - npm install -g netlify-cli
    - apk add curl jq
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --dir build --json | tee deploy-result.json
    - REVIEW_URL=$(jq -r '.deploy_url' deploy-result.json)
    - echo $REVIEW_URL
    - curl $REVIEW_URL | grep 'GitLab'
    - echo "REVIEW_URL=$REVIEW_URL" > deploy.env
    - cat deploy.env
  artifacts:
    reports:
      dotenv: deploy.env

e2e:
  stage: post_deploy_review
  image: mcr.microsoft.com/playwright:v1.49.1-noble
  variables:
    APP_BASE_URL: $REVIEW_URL
  script:
    - npm ci
    - npm run e2e
#+end_src

* Docker for DevOps

** Initial config
#+begin_src yaml
variables:
  NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

stages:
  - build
  - deploy

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

netlify_prod:
  image: node:22-alpine
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  environment:
    name: production
    url: 'https://ocd-learn-gitlab.netlify.app'
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'
#+end_src

** Build a Docker image

https://docs.docker.com/reference/dockerfile/

#+begin_src yaml
variables:
  NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

stages:
  - build
  - deploy

build_docker_netlify:
  stage: .pre
  image: docker:27
  services:
    - docker:27-dind
  script:
    - docker version
    - docker build -t netlify -f ci/Dockerfile .
    - docker image ls

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

netlify_prod:
  image: node:22-alpine
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  environment:
    name: production
    url: 'https://ocd-learn-gitlab.netlify.app'
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'
#+end_src

** GitLab container registry
#+begin_src yaml
variables:
  NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

stages:
  - build
  - deploy

build_docker_netlify:
  stage: .pre
  image: docker:27
  services:
    - docker:27-dind
  script:
    - docker version
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build -t netlify -f ci/Dockerfile .
    - docker image ls

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

netlify_prod:
  image: node:22-alpine
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  environment:
    name: production
    url: 'https://ocd-learn-gitlab.netlify.app'
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'
#+end_src

** Push an image to the GitLab container registry
#+begin_src yaml
variables:
  NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

stages:
  - build
  - deploy

build_docker_netlify:
  stage: .pre
  image: docker:27
  services:
    - docker:27-dind
  script:
    - docker version
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/netlify -f ci/Dockerfile .
    - docker image ls
    - docker push $CI_REGISTRY_IMAGE/netlify

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

netlify_prod:
  image: node:22-alpine
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  environment:
    name: production
    url: 'https://ocd-learn-gitlab.netlify.app'
  before_script: 
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'
#+end_src

** Use a custom Docker image in the pipeline

Go to =Deploy->Container registry= and copy the image path

#+begin_src yaml
variables:
  NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

stages:
  - build
  - deploy

build_docker_netlify:
  stage: .pre
  image: docker:27
  services:
    - docker:27-dind
  script:
    - docker version
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/netlify -f ci/Dockerfile .
    - docker image ls
    - docker push $CI_REGISTRY_IMAGE/netlify

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

netlify_prod:
  image: $CI_REGISTRY_IMAGE/netlify
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  environment:
    name: production
    url: 'https://ocd-learn-gitlab.netlify.app'
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'
#+end_src

** Create a scheduled pipeline

Create a schedule from =Bukild->Pipeline schedules=

Exclude a step when pipeline isn't scheduled

#+begin_src yaml
variables:
  NETLIFY_SITE_ID: 'a1582667-4e53-4bb4-8eaa-1af0768302a2'
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

stages:
  - build
  - deploy

build_docker_netlify:
  stage: .pre
  image: docker:27
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  services:
    - docker:27-dind
  script:
    - docker version
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/netlify -f ci/Dockerfile .
    - docker image ls
    - docker push $CI_REGISTRY_IMAGE/netlify

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

netlify_prod:
  image: $CI_REGISTRY_IMAGE/netlify
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  environment:
    name: production
    url: 'https://ocd-learn-gitlab.netlify.app'
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'
#+end_src

* Deploy over SSH
** Create an Ngnix web server
#+begin_src bash
# Install ngnix
sudo dnf install -y nginx

# Starts the Nginx web server service
sudo systemctl start nginx

# Configures a the Ngnix service to start automatically when the system boots
sudo systemctl enable nginx

# Displays detailed information about the current state of the Nginx service
sudo systemctl status nginx
#+end_src

** Check if a port of the vm is open with netcat
#+begin_src shell
nc -zv 18.201.118.147 22
#+end_src

** Store the SSH private key in GitLab

Move to =Settings->CI/CD->Variables= and add a variable of type file with the value of the private key

** Verify the SSH host keys

#+begin_src shell
# connect to vm and get te fingerpring of the machine
ssh-keyscan 18.201.118.147 22
#+end_src

Move to =Settings->CI/CD->Variables= and add a variable of type file with key the SSH_KNOWN_HOSTS and the value of uncommented lines of the ssh-keyscan

** Upload files using scp

Move to the vm and change the owner of the directory to upload the files to the current user

#+begin_src shell
# change the owner of the nginx/html directory
sudo chown -R john-doe:john-doe /usr/share/nginx/html/
#+end_src

Update .gitlab-ci.yml with the deploy step

#+begin_src yaml
variables:
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

ssh_deploy:
  stage: deploy
  image: alpine
  before_script:
     # Check if port 22 is open on the server
    - nc -zv $REMOTE_DEPLOY_HOST 22
    # Grant read-only permission to the private key
    - chmod 400 $SSH_PRIVATE_KEY
    # Install the OpenSSH client
    - apk add openssh-client
    # Start the SSH agent
    - eval $(ssh-agent)
    # Add the SSH key to the agent
    - ssh-add $SSH_PRIVATE_KEY
    # Create the SSH directory and assign the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Create the known_hosts files and assign the right permissions
    - cp $SSH_KNOWN_HOSTS ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Open SSH connection + run commands
    - ssh $REMOTE_DEPLOY_USER@$REMOTE_DEPLOY_HOST "whoami; touch /tmp/foo.txt; ls -l /tmp"
    # Copy all the directories and files from the build directory (but not build itself) to the remote destination
    - scp -r build/* $REMOTE_DEPLOY_USER@$REMOTE_DEPLOY_HOST:/usr/share/nginx/html/
#+end_src

** Upload fiels using rsync

Use rsync instead of scp. You need to install it first

#+begin_src yaml
variables:
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

ssh_deploy:
  stage: deploy
  image: alpine
  before_script:
     # Check if port 22 is open on the server
    - nc -zv $REMOTE_DEPLOY_HOST 22
    # Grant read-only permission to the private key
    - chmod 400 $SSH_PRIVATE_KEY
    # Install the OpenSSH client, rsync
    - apk add openssh-client rsync
    # Start the SSH agent
    - eval $(ssh-agent)
    # Add the SSH key to the agent
    - ssh-add $SSH_PRIVATE_KEY
    # Create the SSH directory and assign the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Create the known_hosts files and assign the right permissions
    - cp $SSH_KNOWN_HOSTS ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Open SSH connection + run commands
    - ssh $REMOTE_DEPLOY_USER@$REMOTE_DEPLOY_HOST "whoami; touch /tmp/foo.txt; ls -l /tmp"
    # Copy all the directories and files from the build directory (but not build itself) to the remote destination
    - rsync -rvz --delete build/ $REMOTE_DEPLOY_USER@$REMOTE_DEPLOY_HOST:/usr/share/nginx/html/
#+end_src

** Run a deployment script

*** Script to execute on server
#+begin_src shell
#!/bin/bash

# Print a message
echo "Starting the deployment ..."

# Input variables
ZIP_FILE="build.zip"                # Replace with your ZIP file path
BUILD_DIR="build"                   # Replace with your build directory name
DEST_DIR="/usr/share/nginx/html/"   # Replace with your target directory
HTTP_URL="http://example.com"       # Replace with the HTTP address you want to fetch

# Create a temporary directory
TEMP_DIR=$(mktemp -d)

# Check if the ZIP file exists
if [[ ! -f "$ZIP_FILE" ]]; then
  echo "Error: $ZIP_FILE could not be found."
  exit 1
fi

# Unzip the file to the temporary directory
echo "Unzipping $ZIP_FILE to $TEMP_DIR..."
unzip "$ZIP_FILE" -d "$TEMP_DIR" > /dev/null
mv "$TEMP_DIR"/"$BUILD_DIR"/* "$TEMP_DIR"/
rm -rf "$TEMP_DIR"/"$BUILD_DIR"/

if [[ $? -ne 0 ]]; then
  echo "Error: Failed to unzip $ZIP_FILE."
  exit 1
fi

# Copy the content to the destination directory
echo "Copying files to $DEST_DIR..."
rsync -rv --delete "$TEMP_DIR"/ "$DEST_DIR"

if [[ $? -ne 0 ]]; then
  echo "Error: Failed to copy files to $DEST_DIR."
  exit 1
fi

# Cleanup the temporary directory
echo "Cleaning up temporary files..."
rm -rf "$TEMP_DIR"

# Fetch the HTTP address and search for "GitLab"
echo "Fetching content from $HTTP_URL and searching for 'GitLab'..."
if curl -fs "$HTTP_URL" | grep -iq "GitLab"; then
  echo "Found 'GitLab' in the response!"
else
  echo "Error: Could not find 'GitLab' or fetch content from $HTTP_URL."
  exit 1
fi

echo "Deployment completed successfully!"
#+end_src

*** Update .gitlab-ci.yml to execure the script on the server
#+begin_src yaml
variables:
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

ssh_deploy:
  stage: deploy
  image: alpine
  before_script:
     # Check if port 22 is open on the server
    - nc -zv $REMOTE_DEPLOY_HOST 22
    # Grant read-only permission to the private key
    - chmod 400 $SSH_PRIVATE_KEY
    # Install the OpenSSH client, rsync, zip
    - apk add openssh-client rsync zip
    # Start the SSH agent
    - eval $(ssh-agent)
    # Add the SSH key to the agent
    - ssh-add $SSH_PRIVATE_KEY
    # Create the SSH directory and assign the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Create the known_hosts files and assign the right permissions
    - cp $SSH_KNOWN_HOSTS ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Create a zip archive of the build directory
    - zip -r build.zip build/
    # Copy the build artifact (zip) and the deploy script to the remote location
    - scp build.zip ci/deploy.sh $REMOTE_DEPLOY_USER@$REMOTE_DEPLOY_HOST:~/deploy
    # Open SSH connection and run the deploy script
    - ssh $REMOTE_DEPLOY_USER@$REMOTE_DEPLOY_HOST "cd ~/deploy; chmod +x deploy.sh; ./deploy.sh"
#+end_src

* Example for spring boot
#+begin_src yaml
variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"
  DOCKER_IMAGE_NAME: "dev-docker.corp.iknowhow.com:5000/bi-health-ws"
  DOCKER_CONTAINER_NAME: "bi-health-ws"
  DOCKER_CONTAINER_PORT: "3001"
  PROJECT_NAME: "bi-health-ws"
  SO_API_BASE_URL: "${GLOBAL_SO_API_BASE_URL}"

stages:
  - build
  - test

build-image:
  stage: build
  image: maven:3.9-eclipse-temurin-21
  script:
    - echo "Starting building process"
    - mvn clean package -P staging -Duser.timezone=EET
    - echo "Pushing to registry"
  artifacts:
    paths:
      - target/
      - Dockerfile
    expire_in: 1 hour # Keep artifacts for a short period, or as needed
  # You may modify this according to the branches you want to automatically build
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  tags:
    - build
    - docker
    - global
    - shared

maven-test:
  image: maven:3.9-eclipse-temurin-21
  stage: test
  script: "mvn test"
  artifacts:
    paths:
      - target/*.jar
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  tags:
    - build
    - docker
    - global
    - shared
#+end_src
