#+title: Shell Conditionals

* Create a conditional in command line

#+begin_src sh
$ if mkdir a; then echo "ok"; else echo "error"; fi
ok

$ if mkdir a; then echo "ok"; else echo "error"; fi
mkdir: cannot create directory ‘a’: File exists
error
#+end_src

Declare a variable

#+begin_src shell
$ declare -i days
#+end_src

Set a value of a declared variable

#+begin_src shell
$ read days
30
#+end_src

Write an if statement

#+begin_src shell
$ if [ $days -lt 1 ] ; then echo "Enter a correct value" ; fi
#+end_src

Set an invalid variable and check it again

#+begin_src shell
$ read days
Monday
$ if [ $days -lt 1 ] ; then echo "Enter a correct value" ; fi
Enter a correct value
#+end_src

Use a modern syntax for if statement

#+begin_src shell
$ if (( days < 1 || days > 30 )) ; then echo "Enter a correct value"; fi
#+end_src

Repeat the last command

#+begin_src shell
$ !r
#+end_src

** Complex if statement

#+begin_src shell
$ if (( days < 1 )) ; then echo "Enter a numeric value" ; elif (( days > 30 )) then echo "Enter a value to be less than 31" ; else echo "The days are $days"; fi
#+end_src

* Creating scripts with conditions

Create a file =dir.sh=

#+begin_src shell
#!/bin/bash
declare -l DIR
echo -n "Enter a directory to create: "
read DIR
if [[ -e $DIR ]]
then
    echo "$DIR already exists"
    exit 1
else
    if [[ -w $PWD ]]
    then
        mkdir $DIR
    else
        echo "You don't have permissions to $PWD"
        exit 2
    fi
fi
#+end_src

Make the file executable

#+begin_src shell
chmod +x dir.sh
#+end_src

Run the script

#+begin_src shell
$ ./dir.sh
Enter a directory to create: mydir
$
#+end_src

Run the script from a folder without permissions

#+begin_src shell
$ cd /etc
$ /home/johndoe/dir.sh
Enter a directory to create: dir1
You don't have permissions to /etc

$ echo $?
2
#+end_src

* Testing Strings and Regular Expressions

#+begin_src shell
# declare a string variable and convert it to lowercase
$ declare -l user_name

# set the value of the variable
$ read user_name
Bob

# test the variable
$ [ $user_name == 'bob' ] && echo "user is bob"
#+end_src

** Testing partial string values

#+begin_src shell
$ declare -l browser
$ read browser
Firefox

$ [[ $browser == *fox ]] && echo "The browser's Firefox"
The browser's Firefox
#+end_src

** Testing regular expressions

#+begin_src shell
$ declare -l test_var
$ read test_var
color

$ [[ $test_var =~ colou?r ]] && echo "${BASH_REMATCH[0]}"
#+end_src

* Understanding file attributes

** Testing file attributes

We can test to see if a file is of a specific type. Here we check for a
regular file.

#+begin_src shell
$ test -f /etc/hosts && echo YES
# or
$ [[ -f /etc/hosts ]] && echo YES
#+end_src

- =-f= To test for a regular file: =[[ -f /etc/hosts ]]=
- =-d= Tests for a directory: =[[ -d /etc ]]=
- =-L= Tests for symbolic link =[[ -L /etc/localtime ]]=
- =-e= For the existence of a file no matter the type:
  =[[ -e /etc/nologin ]]=
- =-r= Tests for the read permission, r = read, w = write, x = execute:
  =[[ -r /etc/hosts ]]=
- =-k= Tests for the sticky bit: =[[ -k /tmp ]]=
- =-s= Tests for the SUID bit, use g for the GUID bit:
  =[[ -s /bin/passwd ]]=

** Detect what type of command something is

Use the command =type=

#+begin_src shell
$ type test
test is a shell builtin
#+end_src

Test multiple commands

#+begin_src shell
$ type test [ [[
test is a shell builtin
[ is a shell builtin
[[ is a shell keyword
#+end_src

Examples

#+begin_src shell
$ test -f /etc
$ echo $?
1

$ test -d /etc
$ echo $?
0
#+end_src

* Use conditional in a script

#+begin_src sh
#!/bin/bash

if [[ ! $1 ]]; then
    echo "Error: missing parameter: container name"
    exit
fi

container="$1"
directory="$2"

mkdir -p -- "$directory"
grep -- "$container" "$input_file" > "$directory/${container}_report.csv"

echo "Wrote report $directory/${container}_report.csv"
#+end_src

Run the script without arguments

#+begin_src sh
$ create_report.sh
Error: missing parameter: container name
#+end_src

Return the status of a script after exit

- 0 means success
- any other means error. Return 1 in this case if there is an error

#+begin_src sh
#!/bin/bash
if [[ ! $1 ]]; then
    echo "Error: missing parameter: container name"
    exit 1
fi
#+end_src

Add the conditional in the script

#+begin_src sh
#!/bin/bash

if [[ ! $1 ]]; then
    echo "Error: missing parameter: container name"
    exit 1
fi

container="$1"
directory="$2"

mkdir -p -- "$directory"
if grep -- "$container" "$input_file" > "$directory/${container}_report.csv"
then
    echo "Wrote report $directory/${container}_report.csv"
else
    echo "Container $container not found in $input_file"
fi
#+end_src

* And, Or, Not

Simple AND / OR statements

#+begin_src shell
$ echo hello || echo bye
hello
#+end_src

#+begin_src shell
$ echo hello && echo bye
hello
bye
#+end_src

#+begin_src sh
[[ ! -e $file ]] # File does NOT exist
[[ ! $1 ]] # Argument empty
# Use spaces around !

[[ -d $dir && $1 = "foo" ]] # && means "and"
[[ $a || $b ]] # || means "or"
#+end_src

Update the script to check for the parameters

#+begin_src sh
#!/bin/bash

# Create a report file for a single shipping container

if [[ ! $input_file ]]; then
    echo "Error: Input file not configured"
    exit 1
fi

if [[ ! -e $input_file ]]; then
    echo "Error: Input file $input_file does not exist"
    exit 1
fi

if [[ ! $1 ]]; then
    echo "Error: missing parameter: container name"
    exit 1
fi

container="$1"

if [[ $2 ]]; then
    directory="$2"
else
    directory="$HOME/reports"
fi

mkdir -p -- "$directory"
if grep -- "$container" "$input_file" > "$directory/${container}_report.csv"
then
    echo "Wrote report $directory/${container}_report.csv"
else
    echo "Container $container not found in $input_file"
fi
#+end_src

Run the script with one parameter

#+begin_src sh
$ create_report.sh X1
create_report.sh X1
#+end_src

Set the variable =input_file= to nothing

#+begin_src sh
export input_file=""
#+end_src

Run the script again

#+begin_src sh
$ create_report.sh X1
Error: Input file not configured
#+end_src
* Working with case statement

Return the short form of a month

#+begin_src shell
$ date +%b
#+end_src

Create the script =season.sh=

#+begin_src shell
#!/bin/bash
declare -l month=$(date +%b)
case $month in
    dec | jan | feb )
        echo "Winter";;
    mar | apr | may )
        echo "Spring";;
    jun | jul | aug )
        echo "Summer";;
    sep | oct | nov )
        echo "Automn";;
esac
#+end_src

Make the file executable

#+begin_src shell
$ chmod +x season.sh
#+end_src

Run the script

#+begin_src shell
$ ./season.sh
Spring
#+end_src
