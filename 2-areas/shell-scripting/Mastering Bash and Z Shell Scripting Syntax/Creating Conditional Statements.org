* Understanding simple tests

*** Simple AND / OR statements

#+begin_src shell
$ echo hello || echo bye
hello
#+end_src

#+begin_src shell
$ echo hello && echo bye
hello
bye
#+end_src

* Working with simple tests

Run a command and test if it succeded

#+begin_src shell
$ cat /etc/hosts
$ echo $?
0
#+end_src

If the previous command succeeded, =echo $?= returns 0 otherwise a
different integer

#+begin_src shell
$ cat /etc/hostss
$ echo $?
1
#+end_src

Check if a user exists

#+begin_src shell
# if user exist it will return it
$ getent passed tux
tux:x:1000:1000:tux:/home/tux:/bin/bash
#+end_src

Declare a variable

#+begin_src shell
$ declare -i days
#+end_src

Set a value of a declared variable

#+begin_src shell
$ read days
30
#+end_src

Write an if statement

#+begin_src shell
$ if [ $days -lt 1 ] ; then echo "Enter a correct value" ; fi
#+end_src

Set an invalid variable and check it again

#+begin_src shell
$ read days
Monday
$ if [ $days -lt 1 ] ; then echo "Enter a correct value" ; fi
Enter a correct value
#+end_src

Use a modern syntax for if statement

#+begin_src shell
$ if (( days < 1 || days > 30 )) ; then echo "Enter a correct value"; fi
#+end_src

Repeat the last command

#+begin_src shell
$ !r
#+end_src

*** Complex if statement

#+begin_src shell
$ if (( days < 1 )) ; then echo "Enter a numeric value" ; elif (( days > 30 )) then echo "Enter a value to be less than 31" ; else echo "The days are $days"; fi
#+end_src

* Testing Strings and Regular Expressions

#+begin_src shell
# declare a string variable and convert it to lowercase
$ declare -l user_name

# set the value of the variable
$ read user_name
Bob

# test the variable
$ [ $user_name == 'bob' ] && echo "user is bob"
#+end_src

** Testing partial string values

#+begin_src shell
$ declare -l browser
$ read browser
Firefox

$ [[ $browser == *fox ]] && echo "The browser's Firefox"
The browser's Firefox
#+end_src

** Testing regular expressions

#+begin_src shell
$ declare -l test_var
$ read test_var
color

$ [[ $test_var =~ colou?r ]] && echo "${BASH_REMATCH[0]}"
#+end_src

* Understanding file attributes

** Testing file attributes

We can test to see if a file is of a specific type. Here we check for a
regular file.

#+begin_src shell
$ test -f /etc/hosts && echo YES
# or
$ [[ -f /etc/hosts ]] && echo YES
#+end_src

- =-f= To test for a regular file: =[[ -f /etc/hosts ]]=
- =-d= Tests for a directory: =[[ -d /etc ]]=
- =-L= Tests for symbolic link =[[ -L /etc/localtime ]]=
- =-e= For the existence of a file no matter the type:
  =[[ -e /etc/nologin ]]=
- =-r= Tests for the read permission, r = read, w = write, x = execute:
  =[[ -r /etc/hosts ]]=
- =-k= Tests for the sticky bit: =[[ -k /tmp ]]=
- =-s= Tests for the SUID bit, use g for the GUID bit:
  =[[ -s /bin/passwd ]]=

*** Detect what type of command something is

Use the command =type=

#+begin_src shell
$ type test
test is a shell builtin
#+end_src

Test multiple commands

#+begin_src shell
$ type test [ [[
test is a shell builtin
[ is a shell builtin
[[ is a shell keyword
#+end_src

Examples

#+begin_src shell
$ test -f /etc
$ echo $?
1

$ test -d /etc
$ echo $?
0
#+end_src

* Creating scripts with test conditions

Create a file

#+begin_src shell
$ vim dir.sh
#+end_src

Add contents of the script to the file

#+begin_src shell
#!/bin/bash
declare -l DIR
echo -n "Enter a directory to create: "
read DIR
if [[ -e $DIR ]]
then
    echo "$DIR already exists"
    exit 1
else 
    if [[ -w $PWD ]]
    then
        mkdir $DIR
    else
        echo "You don't have permissions to $PWD"
        exit 2
    fi
fi
#+end_src

Make the file executable

#+begin_src shell
$ chmod +x dir.sh
#+end_src

Run the script

#+begin_src shell
$ ./dir.sh
Enter a directory to create: mydir
$
#+end_src

Run the script from a folder without permissions

#+begin_src shell
$ cd /etc
$ /home/johndoe/dir.sh
Enter a directory to create: dir1
You don't have permissions to /etc

$ echo $?
2
#+end_src

* Working with case statement

Return the short form of a month

#+begin_src shell
$ date +%b
#+end_src

Create the script =season.sh=

#+begin_src shell
#!/bin/bash
declare -l month=$(date +%b)
case $month in
    dec | jan | feb )
        echo "Winter";;
    mar | apr | may )
        echo "Spring";;
    jun | jul | aug )
        echo "Summer";;
    sep | oct | nov )
        echo "Automn";;
esac
#+end_src

Make the file executable

#+begin_src shell
$ chmod +x season.sh
#+end_src

Run the script

#+begin_src shell
$ ./season.sh 
Spring
#+end_src
