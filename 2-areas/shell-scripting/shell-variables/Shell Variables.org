#+title: Shell Variables

* [[file:export variables.org][export variables]]
* using shell variables

Create a script with a variable and a parameter

#+begin_src sh
#!/bin/bash

# Create a report file for a single shipping container
# Author: vkardaras

directory=reports

mkdir -p $directory
grep $1 shipments.csv > $directory/$1.csv

echo Wrote report $directory/$1.csv
#+end_src

Execute the script by passing the parameter.

#+begin_src sh
/create_report.sh B5
#+end_src

* [[file:Working with variables.org][Working with variables]]
* Naming variables

- Use letters, numbers, underscore
- First character: a letter or underscore
- Case-sensitive

Uppercase variables

- pre-defined varables
- PATH, HOME, SECONDS, IF, etc.
- Don't override them by mistake

Good habit

- Use lowercase names
* shell command-line arguments

Read the output directory from a command-line argument

#+begin_src sh
#!/bin/bash

# Create a report file for a single shipping container
# Author: vkardaras

container=$1
directory=$2

mkdir -p $directory
grep $container shipments.csv > $directory/$container.csv

echo Wrote report $directory/$container.csv
#+end_src

Execute the script

#+begin_src sh
./create_reportk.sh X1 work
#+end_src

Use quotes with variables to handle spaces for values

#+begin_src sh

#!/bin/bash

# Create a report file for a single shipping container

# Author: vkardaras

container="$1" directory="$2"

mkdir -p "\(directory"
grep "\)container" shipments.csv > "\(directory/\)container.csv"

echo "Wrote report \(directory/\)container.csv"

#+end_src

* shell tips

** End of options

Use =--= to declare the end of the options of a command

#+begin_src sh
#!/bin/bash

# Create a report file for a single shipping container
# Author: vkardaras

container="$1"
directory="$2"

mkdir -p -- "$directory"
grep -- "$container" shipments.csv > "$directory/$container.csv"

echo "Wrote report $directory/$container.csv"
#+end_src

** Use =printf= instead of =echo=

#+begin_src sh
$ echo -- $USER
-- johndoe

$ printf "%s\n" $USER
johndoe

$ printf "I am %s and my shell is %s\n" $USER $SHELL
I am johndoe and my shell is /bin/bash
#+end_src

** Braces

Use braces to separate a variable in a string

#+begin_src sh
#!/bin/bash

# Create a report file for a single shipping container
# Author: vkardaras

container="$1"
directory="$2"

mkdir -p -- "$directory"
grep -- "$container" shipments.csv > "$directory/${container}_report.csv"

echo "Wrote report $directory/${container}_report.csv"
#+end_src

* shell best practices

** Quote your variables

Use ="$x"= instead of =$x=

No surprises when input contains spaces

Use double quotes

- keep meaning of dollar sign intact

Not necessary in zhs

- Zsh does not split variables in words
- Behaviour is configurable

** Braces

Where does your variable name end

=echo "${foo}bar"=

- prints value of var foo
- followed by string "bar"

=echo "$foobar"=

- prints value of foobar

* shell variables from file

#+begin_src sh
#!/bin/bash
set -a
. ./env.txt
set +a
#+end_src
* Read Inputs

Read variable from user
#+begin_src shell

#!/bin/bash
read mission_name

#+end_src

Read variable from user with prompt
#+begin_src shell

#!/bin/bash
read -p "Enter mission name: " mission_name

#+end_src

* Arithmetic Operations

** Using the expr Command

#+begin_src shell
expr 6 + 3
#+end_src

#+RESULTS:
: 9

More examples

#+begin_src shell
$ expr 6 + 3
9
$ expr 6 - 3
3
$ expr 6 / 3
2
$ expr 6 \* 3
18


$ A=6
$ B=3
$ expr $A + $B
9
$ expr $A - $B
3
$ expr $A / $B
2
$ expr $A \* $B
18
#+end_src

** Using Double Parentheses

#+begin_src shell
$ A=6
$ B=3
$ echo $(( A + B ))
9
$ echo $(( A - B ))
3
$ echo $(( A / B ))
2
$ echo $(( A * B ))
18

#+end_src

C-style variable manipulation

#+begin_src shell
$ echo $(( ++A ))
7
$ echo $(( --A ))
6
$ echo $(( A++ ))
6
$ echo $(( A-- ))
7
#+end_src

** Performing Floating Point Arithmetic with bc

#+begin_src shell
A=10
B=3
echo "$A / $B" | bc -l
#+end_src

#+RESULTS:
: 3.3333333333333335
