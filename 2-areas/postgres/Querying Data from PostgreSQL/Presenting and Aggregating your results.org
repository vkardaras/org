** Sort Order
:PROPERTIES:
:CUSTOM_ID: sort-order
:END:
*** Querying Residency
:PROPERTIES:
:CUSTOM_ID: querying-residency
:END:
#+begin_src sql
    SELECT name, state
        FROM residency
ORDER BY name;
#+end_src

If we do not list a sorting direction, ascending is the default order.

*** Specifying Sort Order
:PROPERTIES:
:CUSTOM_ID: specifying-sort-order
:END:
=Ascending= Smallest to largest

#+begin_src sql
SORT BY ASC
#+end_src

=Descending= Largest to smallest

#+begin_src sql
SORT BY DESC
#+end_src

*** Sort with more than one column
:PROPERTIES:
:CUSTOM_ID: sort-with-more-than-one-column
:END:
#+begin_src sql
    SELECT name, state
        FROM residency
ORDER BY state, name;
#+end_src

*** Sort in both orders
:PROPERTIES:
:CUSTOM_ID: sort-in-both-orders
:END:
#+begin_src sql
    SELECT name, state
        FROM residency
ORDER BY state DESC, name ASC;
#+end_src

** Introduction to Aggregate Functions
:PROPERTIES:
:CUSTOM_ID: introduction-to-aggregate-functions
:END:
*** Aggregate Functions
:PROPERTIES:
:CUSTOM_ID: aggregate-functions
:END:
- =COUNT= counts rows in a specified table or view
- =SUM= calculates the sum of a given set of values
- =AVG= calculates the average of a set of values
- =MIN= finds the minimum value in a set of values
- =MAX= finds the maximum value in a set of values

To use an aggregate function, include it in the SELECT clause

#+begin_src sql
SELECT AVG(age)
    FROM person;
#+end_src

We can alias the aggregate calculation

#+begin_src sql
SELECT AVG(age) AS avg_age
    FROM person;
#+end_src

*** Analyzing Groups
:PROPERTIES:
:CUSTOM_ID: analyzing-groups
:END:
- Aggregate functions can be used for more sophisticated analysis
- What is our average age by grade level?
- GROUP BY keyword is used to specify groups

#+begin_src sql
    SELECT grade_lvl, 
               AVG(age) AS avg_age
        FROM person
GROUP BY grade_lvl;
#+end_src

*** Using GROUP BY with Aggregation
:PROPERTIES:
:CUSTOM_ID: using-group-by-with-aggregation
:END:
Incorrect

#+begin_src sql
SELECT grade_lvl,
             MIN(age) AS minimum_age
    FROM person;
#+end_src

Correct

#+begin_src sql
    SELECT grade_lvl,
               MIN(age) AS minimum_age
        FROM person
GROUP BY grade_lvl;
#+end_src

All non-aggregate fields in the SELECT clause must be represented in the
GROUP BY clause

#+begin_src sql
    SELECT mtk_carrier,
               AVG(dep_delay_new)
        FROM performance
GROUP BY mtk_carrier;
#+end_src

Group by two fields

#+begin_src sql
    SELECT p.mtk_carrier,
                 c.carrier_desc
               AVG(p.dep_delay_new)
        FROM performance p
        JOIN codes_carrier c
            ON p.mtk_carrier = c.carrier_code
GROUP BY p.mtk_carrier
                 c.carrier_desc;
#+end_src

Using GROUP BY with ORDER BY

#+begin_src sql
    SELECT p.mtk_carrier,
                 c.carrier_desc
               AVG(p.dep_delay_new)
        FROM performance p
        JOIN codes_carrier c
            ON p.mtk_carrier = c.carrier_code
GROUP BY p.mtk_carrier
                 c.carrier_desc
ORDER BY AVG(p.dep_delay_new);
#+end_src

Use multiple aggregates in one select query

#+begin_src sql
    SELECT p.mtk_carrier,
                 c.carrier_desc
               AVG(p.dep_delay_new) AS departure_delay,
               AVG(p.arr_delay_new) AS arrival_delay
        FROM performance p
        JOIN codes_carrier c
            ON p.mtk_carrier = c.carrier_code
GROUP BY p.mtk_carrier
                 c.carrier_desc
ORDER BY AVG(p.dep_delay_new);
#+end_src

** Filtering Aggregate Results
:PROPERTIES:
:CUSTOM_ID: filtering-aggregate-results
:END:
- =WHERE= Filter single rows
- =HAVING= Filter aggregate results

=HAVING= always follows =GROUP BY= and can be interpreted as
=GROUP BY grade_lvl=

#+begin_src sql
    SELECT grade_lvl,
               AVG(age) AS avg_age
        FROM person
GROUP BY grade_lvl
    HAVING AVG(age) < 19;
#+end_src

=HAVING= clause specifies that we want to filter aggregate values from
AVG

#+begin_src sql
    SELECT p.mtk_carrier,
                 c.carrier_desc
               AVG(p.dep_delay_new) AS departure_delay,
               AVG(p.arr_delay_new) AS arrival_delay
        FROM performance p
        JOIN codes_carrier c
            ON p.mtk_carrier = c.carrier_code
GROUP BY p.mtk_carrier
                 c.carrier_desc
    HAVING AVG(p.dep_delay_new) > 15
         AND AVG(p.arr_delay_new) > 15;
#+end_src
