** Introducing the WHERE keyword
:PROPERTIES:
:CUSTOM_ID: introducing-the-where-keyword
:END:
Filtering results

All records

#+begin_src sql
SELECT first_name, last_name
    FROM person;
#+end_src

Limiting criteria

#+begin_src sql
SELECT first_name, last_name
    FROM person
    WHERE first_name = "Joe";
#+end_src

Criteria in the WHERE clause is case-sensitive

** Specific conditions
:PROPERTIES:
:CUSTOM_ID: specific-conditions
:END:
Comparison operators

- Equal ===
- Not equal =<>=
- Greater than =>=
- Less than =<=
- Greater than or equal =>==
- Less than or equal =<==

Using comparison operators to filter for specific conditions

#+begin_src sql
SELECT first_name, last_name
    FROM person
    WHERE name = 'John'
        AND last_name = 'Doe';
#+end_src

** LIKE pattern matching
:PROPERTIES:
:CUSTOM_ID: like-pattern-matching
:END:
- Relational operators match fields to a specific value
- LIKE matches fields to a specific pattern

Functionality of LIKE

#+begin_src sql
SELECT first_name, last_name
    FROM person
    WHERE first_name = 'John';
#+end_src

Can be written like the following

#+begin_src sql
SELECT first_name, last_name
    FROM person
    WHERE first_name LIKE 'John';
#+end_src

*** Pattern wildcards
:PROPERTIES:
:CUSTOM_ID: pattern-wildcards
:END:
Pattern to match can include wildcards

- =%= represents zero or more characters
- =_= represents exactly one character

Return results where origin_city_name starts with Fort

#+begin_src sql
SELECT fl_date, 
                mkt_carrier AS airline,
                mkt_carrier_fl_num AS flight,
                origin_city_name
    FROM performance
    WHERE origin_city_name LIKE 'Fort%';
#+end_src

Return results where origin_city_name ends with FL

#+begin_src sql
SELECT DISTINCT origin_city_name
    FROM performance
    WHERE origin_city_name LIKE '%FL';
#+end_src

Return results where origin_city_name starts with New and ends with LA

#+begin_src sql
SELECT DISTINCT origin_city_name
    FROM performance
    WHERE origin_city_name LIKE 'New%FL';
#+end_src

Return results where origin_city_name starts with 4 letters and ends
with =, KS=

#+begin_src sql
SELECT DISTINCT origin_city_name
    FROM performance
    WHERE origin_city_name LIKE '____, KS';
#+end_src

Return results where origin_city_name starts with 4 letters and has a
comma and anything after that

#+begin_src sql
SELECT DISTINCT origin_city_name
    FROM performance
    WHERE origin_city_name LIKE '____, %';
#+end_src

** Null Values
:PROPERTIES:
:CUSTOM_ID: null-values
:END:
- Null is not equivalent to zero
- Null indicates that the value of a field is missing or unknown
- A field is null only when no data exists in that field

*** Keywords for Null Values
:PROPERTIES:
:CUSTOM_ID: keywords-for-null-values
:END:
- =IS NULL=
- =IS NOT NULL=

Get results where the cancellation code is not null

#+begin_src sql
SELECT fl_date, 
                mkt_carrier AS airline,
                mkt_carrier_fl_num AS flight,
                cancellation_code
    FROM performance
    WHERE cancellation_code IS NOT NULL;
#+end_src

Get results where the cancellation code is null

#+begin_src sql
SELECT fl_date, 
                mkt_carrier AS airline,
                mkt_carrier_fl_num AS flight,
                cancellation_code
    FROM performance
    WHERE cancellation_code IS NULL;
#+end_src

** Putting it together
:PROPERTIES:
:CUSTOM_ID: putting-it-together
:END:
*** Logical operators
:PROPERTIES:
:CUSTOM_ID: logical-operators
:END:
- =AND= If a row from the table matches *both* conditions, it will be
  included
- =OR= If a row from the table matches either condition, it will be
  included

*** The BETWEEN keyword
:PROPERTIES:
:CUSTOM_ID: the-between-keyword
:END:
BETWEEN looks for matches within specified boundaries

Boundaries are inclusive

#+begin_src sql
SELECT first_name
                age
    FROM person
    WHERE age >= 19
    AND age <= 35;
#+end_src

Can be written as follow

#+begin_src sql
SELECT first_name
                age
    FROM person
    WHERE age BETWEEN 19 and 35;
#+end_src

*** The IN keyword
:PROPERTIES:
:CUSTOM_ID: the-in-keyword
:END:
- Instead of multiple OR statements
- Can use the SQL keyword IN
- Provide a list of options for a given field

#+begin_src sql
SELECT first_name
                age
    FROM person
    WHERE first_name = 'Jimmy'
    OR first_name = 'Brenna'
    OR first_name = 'Elmo';
#+end_src

Can be written as follow

#+begin_src sql
SELECT first_name
                age
    FROM person
    WHERE first_name IN ("Jimmy, Brenna, Elmo");
#+end_src

*** The NOT IN keyword
:PROPERTIES:
:CUSTOM_ID: the-not-in-keyword
:END:
Used to return records that do not match any of the listed values

** Operator precedence
:PROPERTIES:
:CUSTOM_ID: operator-precedence
:END:
The sequence in which operations are performed

- =AND= has higher operator precedence than =OR=
- SQL will evaluate contents of parentheses first
