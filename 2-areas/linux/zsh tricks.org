** Cursor Navigation and Line Editing
:PROPERTIES:
:CUSTOM_ID: cursor-navigation-and-line-editing
:END:
Zsh provides powerful shortcuts for efficient cursor movement and text
manipulation ### Cursor Movement

#+begin_src sh
# Move cursor to beginning of line
Ctrl + a

# Move cursor to end of line
Ctrl + e
#+end_src

*** Text Deletion
:PROPERTIES:
:CUSTOM_ID: text-deletion
:END:
#+begin_src sh
# Delete from cursor to start of line
Ctrl + u

# Cut from cursor to tne of line
Ctrl + k

# Cut from cursor to start of preceding word
Ctrl + W

# Remove from cursor to end of next word
Alt + D
#+end_src

*** Text manipulation
:PROPERTIES:
:CUSTOM_ID: text-manipulation
:END:
#+begin_src sh
# Paste (yank) previously cut text
Ctrl + y

# Undo the last operation
Ctrl + Shift + _

# Swap the current word with previous word
Ctrl + xt
#+end_src

*** Command Editing
:PROPERTIES:
:CUSTOM_ID: command-editing
:END:
#+begin_src sh
# Edit current command in default editor 
Ctrl + xe

# Clear terminal screen
Ctrl + l

# Move current command to buffer, clear line for new command
Ctrl + q
#+end_src

** Globbing
:PROPERTIES:
:CUSTOM_ID: globbing
:END:
Zsh provides powerful globbing features for flexible file matching

*** Standard Globbing
:PROPERTIES:
:CUSTOM_ID: standard-globbing
:END:
#+begin_src sh
# Match all .txt files in the current directory
,*.txt
# example, press tab after the command to expand all files
ls *.md
#+end_src

*** Recursive Globbing
:PROPERTIES:
:CUSTOM_ID: recursive-globbing
:END:
#+begin_src sh
# Match all .txt files recursively within directories
,**/*.txt
# example
ls **/*.java
#+end_src

*** Extended Globbing
:PROPERTIES:
:CUSTOM_ID: extended-globbing
:END:
Enable extended globbing for more advanced pattern matching:
=setopt EXTENDED_GLOB=

#+begin_src sh
# List only regular files
ls *(.)

# List only directories
ls *(/)
#+end_src

** Command History and Expansion
:PROPERTIES:
:CUSTOM_ID: command-history-and-expansion
:END:
Zsh offers powerful features for recalling and manipulating previous
commands

*** History Recall
:PROPERTIES:
:CUSTOM_ID: history-recall
:END:
#+begin_src sh
# Insert last argument of previous command
!$

# Repeat the prevbious command without arguments
!:0

# Run the most recent command that started with `vi`
!vi
#+end_src

*** History Modification
:PROPERTIES:
:CUSTOM_ID: history-modification
:END:
#+begin_src sh
# Substitute 'x' with 'y' in the previous command
!!:s/x/y

# Replace 'foo' with 'bar' in the previous command and execute
^foo^bar
# example
find . -type f -name '*.txt' -execa chmod sudo 600 {} +
^execa^exec
#+end_src

*** Current Command Expansion
:PROPERTIES:
:CUSTOM_ID: current-command-expansion
:END:
#+begin_src sh
# Execute previous command 
!!
# example
find . -type f -name '*.txt' -execa chmod sudo 600 {} +
sudo !!

# Expand first argument of the current command
!#^

# Expand last argument of the current command
!#$
#+end_src

*** Quick Fixes
:PROPERTIES:
:CUSTOM_ID: quick-fixes
:END:
#+begin_src sh
# Fix command: opens last command in editor
fc

# Repeat last command (cam be combined with substitution, e.g., r foo=bar)
r
#+end_src

** Parameter Expansion and Shell Variables
:PROPERTIES:
:CUSTOM_ID: parameter-expansion-and-shell-variables
:END:
Zsh provides powerful features for working with parameters and shell
variables

*** Positional Parameters
:PROPERTIES:
:CUSTOM_ID: positional-parameters
:END:
#+begin_src sh
# Number of positional parameters passed to the script or function
$#

# All positional parameters, individually quoted
$@

# All positional parameters as a single, space-separated string
$*
#+end_src

*** Special Variables
:PROPERTIES:
:CUSTOM_ID: special-variables
:END:
#+begin_src sh
# Exit status of the last executed command
$?

# Last argument of the previous command
$_
#+end_src

** Path and Filename Operations
:PROPERTIES:
:CUSTOM_ID: path-and-filename-operations
:END:
Zsh provides various shortcuts for working with file paths and filenames

*** Path Expansion
:PROPERTIES:
:CUSTOM_ID: path-expansion
:END:
#+begin_src sh
# Quick path expansion (e.g., expands to /usr/local/bin)
/u/lo/b<Tab>
# example
ls /u/lo/b<Tab>
#+end_src

*** Filename Manipulation
:PROPERTIES:
:CUSTOM_ID: filename-manipulation
:END:
#+begin_src sh
# set a file variabla
file=demo.sh

# Remove extension from a filename variable
$file:r
echo $file:r

# Get just the extension from a filename variable
$file:e
echo $file:e

# Convert a filename variable to uppercase
$file:u
echo $file:u
#+end_src

** Brace and Range Expansions
:PROPERTIES:
:CUSTOM_ID: brace-and-range-expansions
:END:
Zsh offers powerful features for generating sequences and sets of items

*** Brace Expansion
:PROPERTIES:
:CUSTOM_ID: brace-expansion
:END:
#+begin_src sh
# Expand to multiple terms
mkdir -p {apple,banana,cherry}
# Delete empty directories
^mk^rm<Tab>

# Expand to a numericc range (outputs: 1 2 3 4 5)
{1..5}
#+end_src

** Directory Navigation Techniques
:PROPERTIES:
:CUSTOM_ID: directory-navigation-techniques
:END:
Efficient directory navigation is crucial for command-line productivity
â€‹### Directory Shortcuts

#+begin_src sh
# Go to previous directory
cd -

# Show directories selection list
cd -<Tab>
#+end_src

These shortcuts streamline directory navigation, making in easier to
move between frequently used directories

** Custom commands and Key Bindings
:PROPERTIES:
:CUSTOM_ID: custom-commands-and-key-bindings
:END:
Zsh allows for the creation of custom commands and key bindings to
further enhance your workflow

*** Understanding =BUFFER= and =zle=
:PROPERTIES:
:CUSTOM_ID: understanding-buffer-and-zle
:END:
- =BUFFER= - Represents the current command line content
- =zle= - Zsh Line Editor, used to manipulate the command line

*** Custom Command Example
:PROPERTIES:
:CUSTOM_ID: custom-command-example
:END:
To create a custom command to copy teh entire command line to the
clipboard

#+begin_src sh
copy-line-to-clipboard() {
    echo -n $BUFFER | xclip -selection clipboard
}
zle -N copy-line-to-clipboard
#+end_src

This function uses =xclip= to copy the content of =BUFFER= (the current
command line) to the clipboard.

*** Adding Custom Key Bindings
:PROPERTIES:
:CUSTOM_ID: adding-custom-key-bindings
:END:
Bind custom functions or existing ZLE commands to specific key sequences

#+begin_src sh
# Bind Ctrl+Y to copy-line-to-clipboard
bindkey '^Y' copy-line-to-clipboard
#+end_src
