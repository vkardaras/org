#+title: Linux Security And File Permissions

* Linux Accounts

#+begin_src shell

# get details of users
cat /etc/passwd
# get details of a specific user
grep -i ^bob /etc/passwd

# get the groups of a system
cat /etc/group

# review detailed information about a specific user account and its group memberships
id michael

# get details of the users currently loggedin to the system
who

# display the record of all loggedin users
last

# get the detault configuration of sudo
cat /etc/sudoers

#+end_src

* Access Control Files

** The /etc/passwd File

The /etc/passwd file contains vital information about each user on the system
The structure of /etc/passwd is summarized as follows:
=USERNAME:PASSWORD:UID:GID:GECOS:HOMEDIR:SHELL=

- USERNAME: The user's login name.
- PASSWORD: An x placeholder, indicating that the encrypted password is stored in /etc/shadow.
- UID: The unique numeric user identifier.
- GID: The primary group numerical identifier.
- GECOS: An optional field for additional user information (e.g., full name).
- HOMEDIR: The path to the user's home directory.
- SHELL: The user's default shell (such as Bash).

** The /etc/shadow File

The /etc/shadow file securely stores users' encrypted passwords, along with critical account and password expiry information
The fields in /etc/shadow are arranged as follows:
=USERNAME:PASSWORD:LASTCHANGE:MINAGE:MAXAGE:WARN:INACTIVE:EXPDATE=

- USERNAME: Matches the username from /etc/passwd.
- PASSWORD: Contains the encrypted password. An asterisk (*) or an empty value indicates that no password is set.
- LASTCHANGE: The date (measured in days since January 1, 1970) when the password was last changed.
- MINAGE: The minimum number of days required between password changes.
- MAXAGE: The maximum number of days the password remains valid.
- WARN: The number of days before password expiry that the user is warned.
- INACTIVE: The number of days that elapse after password expiry during which the account remains active (if empty, this feature is disabled).
- EXPDATE: The expiration date of the account (expressed as days since the Unix epoch); an empty field means the account does not expire.

** The /etc/group File

The /etc/group file is used to define and manage user groups on the system
The format of /etc/group is:
=NAME:PASSWORD:GID:MEMBERS=

- NAME: The group name.
- PASSWORD: Typically set to x, indicating that any real group password is stored elsewhere.
- GID: The unique numeric group identifier.
- MEMBERS: A comma-separated list of usernames that belong to the group.

* User Management

#+begin_src shell

# add user to the system
useradd bob

# set password for user
passwd bob

# change password for loggedin user
passwd

# delete user from the system
userdel bob

#+end_src

** Using Options with useradd

+ -u: Specify a custom UID.
+ -g: Specify the primary group via a custom GID.
+ -d: Define a custom home directory path.
+ -s: Set the default login shell.
+ -c: Add a comment (often used for a user description).
+ -e: Set the account expiration date.
+ -G: Add the new user to additional (secondary) groups.

#+begin_src shell

# create Bob with a custom UID, GID, home directory, shell, and an account comment
useradd -u 1009 -g 1009 -d /home/robert -s /bin/bash -c "Mercury Project member" bob

#+end_src

** Group management

#+begin_src shell

# add a group with specific id
groupadd -g 1010 newgroup

# delete a group
groupdel newgroup

#+end_src

* File Permissions and Ownership

** Category permissions

1. Owner (u) permissions – the first three characters after the file type.
2. Group (g) permissions – the next three characters.
3. Others (o) permissions – the final three characters.

** Permission set:

+ r (read) permits reading the file (octal value: 4).
+ w (write) allows modifying the file (octal value: 2).
+ x (execute) grants the ability to run the file as a program (octal value: 1).

** Numeric represention of permissions

+ r (read) = 4
+ w (write) = 2
+ x (execute) = 1
+ No permission = 0

Examples
+ rwx equals 7 (4+2+1)
+ r-x equals 5 (4+0+1)
+ -wx equals 3 (0+2+1)

** Changing File Permissions with chmod

Symbolic Mode

#+begin_src shell
chmod u+rwX test-file
chmod ugo+r test-file
chmod o-rwx test-file
chmod u+rwx,g+r-x,o-rwx test-file
#+end_src

Numeric Mode

#+begin_src shell

# grants read, write, and execute for everyone.
chmod 777 test-file
# grants read and execute permissions for everyone.
chmod 555 test-file
# grants read and write permissions to the owner and group, but no permissions for others.
chmod 660 test-file
# grants complete access to the owner, read and execute access to the group, and no permissions for others.
chmod 750 test-file

#+end_src

** Changing Ownership with chown and chgrp

#+begin_src shell

# change both the owner and group of a file
chown owner:group file
chown bob:developer test-file

# change only the owner
chown bob andoid.apk

# change only the group
chgrp android test-file

#+end_src

* SSH and SCP

** SSH

To connect to a server with the hostname "devapp01", you can use any of the following commands
+ ssh <hostname_OR_IP_Address>
+ ssh <user>@<hostname_OR_IP_Address>
+ ssh -l <user> <hostname_OR_IP_Address>

#+begin_src shell

# connect to a server with the hostname "devapp01"
ssh devapp01

#+end_src

** Passwordless SSH with Key Pairs

Configure passwordless authentication by using SSH key pairs.
A key pair consists of:

+ Private Key: Kept secure on your client device.
+ Public Key: Shared and installed on your remote server.

#+begin_src shell

# generate the Key Pair
ssh-keygen -t rsa

# copying the Public Key to the Remote Server
ssh-copy-id bob@devapp01
#+end_src

Public key is now installed in the authorized_keys file within the .ssh directory on the remote server.

** SCP

SCP transfers files and directories securely over SSH.

#+begin_src shell

# copy a file using SCP
scp /home/bob/caleston-code.tar.gz devapp01:/home/bob

#+end_src

* IPTABLES

** Establishing SSH Connectivity

#+begin_src shell

# install iptables
sudo apt install iptables

# list tghe default iptables rules
sudo iptables -L

#+end_src

Iptables uses three main chains, each serving a distinct purpose:

+ INPUT Chain: Manages incoming traffic. For instance, adding a rule here allows SSH connections from your client laptop.
+ OUTPUT Chain: Controls traffic originating from the server, including outbound connections like database queries.
+ FORWARD Chain: Typically used by network routers to forward traffic between devices. Standard Linux servers rarely use this chain.

** Configuring SSH Access

*** Configuring Outbound Traffic

#+begin_src shell

# add an incoming rule on the development server that permits SSH connections solely from the designated client.
iptables -A INPUT -p tcp -s 172.16.238.187 --dport 22 -j ACCEPT

# block unauthorized SSH attempts
iptables -A INPUT -p tcp --dport 22 -j DROP
# drop incoming connections from any source on any destination port for any protocol (TCP/UDP).
sudo iptables -A INPUT -j DROP

# list the iptables rouls
[bob@devapp01 ~]$ iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
ACCEPT     tcp  --  172.16.238.187      anywhere             tcp dpt:ssh
DROP       tcp  --  anywhere             anywhere             tcp dpt:ssh


Chain FORWARD (policy ACCEPT)
target     prot opt source               destination


Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination
#+end_src

Command parameters

+ -A INPUT: Appends a rule to the INPUT chain.
+ -p tcp: Specifies the TCP protocol.
+ -s 172.16.238.187: Restricts the rule to connections coming from the client laptop.
+ --dport 22: Indicates that the rule applies to the SSH port (22).
+ -j ACCEPT: Accepts the connection when all conditions are met.

*** Configuring Outbound Traffic

#+begin_src shell

# add the following OUTPUT rules:
[bob@devapp01 ~]$ iptables -A OUTPUT -p tcp -d 172.16.238.11 --dport 5432 -j ACCEPT
[bob@devapp01 ~]$ iptables -A OUTPUT -p tcp -d 172.16.238.15 --dport 80 -j ACCEPT
[bob@devapp01 ~]$ iptables -A OUTPUT -p tcp --dport 443 -j DROP
[bob@devapp01 ~]$ iptables -A OUTPUT -p tcp --dport 80 -j DROP

# insert a rule at the top of the chain
[bob@devapp01 ~]$ iptables -I OUTPUT -p tcp -d 172.16.238.100 --dport 443 -j ACCEPT

#+end_src

*** Deleting a Rule

#+begin_src shell

[bob@devapp01 ~]$ iptables -D OUTPUT 5

#+end_src

*** Securing the Database Server

#+begin_src shell

# ensure that only the development application server can access the PostgreSQL service on the database server (port 5432)
[bob@devdb01 ~]$ iptables -A INPUT -p tcp -s 172.16.238.10 --dport 5432 -j ACCEPT
[bob@devdb01 ~]$ iptables -A INPUT -p tcp --dport 5432 -j DROP

# list the iptables rules on the DB server
[bob@devdb01 ~]$ iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
ACCEPT     tcp  --  172.16.238.10       anywhere             tcp dpt:5432
DROP       tcp  --  anywhere             anywhere             tcp dpt:5432


Chain FORWARD (policy ACCEPT)
target     prot opt source               destination


Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

#+end_src
