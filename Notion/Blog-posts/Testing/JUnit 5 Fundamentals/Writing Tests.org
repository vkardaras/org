** Test Structure
:PROPERTIES:
:CUSTOM_ID: test-structure
:END:
*** Set the order of the test
:PROPERTIES:
:CUSTOM_ID: set-the-order-of-the-test
:END:
Use =@TestMethodOrder= annotation for class

- Order by method name:
  =@TestMethodOrder(MethodOrderer.MethodName.class)=
- Order by method order annotation:
  =@TestMethodOrder(MethodOrderer.MethodName.class)=
  - Use =@Order= annotation for each method

#+begin_src java
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class RewardByDiscountServiceTest {
    @Test
    @Order(1)
    void setNeededPoints() {
        ...
    }

    @Test
    @Order(2)
    void setPercentageForPoints() {
        ...
    }
}
#+end_src

*** Four phases of every test
:PROPERTIES:
:CUSTOM_ID: four-phases-of-every-test
:END:
- Arrange
- Act
- Assert
- Annihilation

** Lifecycle Methods
:PROPERTIES:
:CUSTOM_ID: lifecycle-methods
:END:
*** Test Fixture
:PROPERTIES:
:CUSTOM_ID: test-fixture
:END:
Everything we need to execute the test.

*** Managing test fixtures
:PROPERTIES:
:CUSTOM_ID: managing-test-fixtures
:END:
- Transient Fresh
- Persistence Fresh
- Persistence Shared

*** Lifecycle Annotations
:PROPERTIES:
:CUSTOM_ID: lifecycle-annotations
:END:
Once per method

- =@BeforeEach=
- =@AfterEach=

Once per class

- =@BeforeAll=
- =@AfterAll=

*** Lifecycle Execution
:PROPERTIES:
:CUSTOM_ID: lifecycle-execution
:END:
Per method

#+begin_src java
@TestInstance(TestInstance.Lifecycle.PER_METHOD)
#+end_src

Per class

#+begin_src java
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
#+end_src

** Disabling Tests
:PROPERTIES:
:CUSTOM_ID: disabling-tests
:END:
The annotation

#+begin_src java
@Disabled("description")
#+end_src

You can use it in Methods and Classes

*** Annotation-based Conditions
:PROPERTIES:
:CUSTOM_ID: annotation-based-conditions
:END:
Enable

#+begin_src java
@EnabledOnOs({ LINUX, MAC })
@EnabledOnJre(JAVA_8)
@EnabledOnJreRange(max=JAVA_10)
@EnabledIfSystemProperty(named="version", matches="1.*")
@EnabledIfEnvironmentVariable(named="ENV", matches="*server")
@EnabledIf("methodName")
#+end_src

#+begin_src java
@DisabledOnOs({ WINDOWS })
@DisabledOnJre({ JAVA_9, JAVA_10 })
@DisabledOnJreRange(min=JAVA_11, max=JAVA_14)
@DisabledIfSystemProperty(named="dev", matches="true")
@DisabledIfEnvironmentVariable(named="ENV", matches="QA")
@DisabledIf("com.example.MyClass\#myMethod")
#+end_src

** Assumptions
:PROPERTIES:
:CUSTOM_ID: assumptions
:END:
- Based on conditions
- Don't result in test failure like assertions
- Abort the test

Assumption methods

- assumeTrue
- assumeFalse
- assumingThat

Example

#+begin_src java
assumeTrue("1".equals(System.getenv("TEST_POINTS")));

assumingThat("1".equals(System.getenv("TEST_POINTS")), 
                () -> {
                        // Execute this assertion only if the assumption is valid
                        assertEquals(10, info.getPointsRedeemed());
                });
                        
#+end_src

** Test Interfaces and Default Methods
:PROPERTIES:
:CUSTOM_ID: test-interfaces-and-default-methods
:END:
*** What to include in interfaces?
:PROPERTIES:
:CUSTOM_ID: what-to-include-in-interfaces
:END:
- =@Test=
- =@FeforeEach=
- =@AfterEach=
- =@RepeatedTest=
- =@ParameterizedTest=
- =@TestFactory=
- =@TestTemplate=
- =@ExtendWith=
- =@Tag=

Static methods

- =@FeforeAll=
- =@AfterAll=

** Repeating Tests
:PROPERTIES:
:CUSTOM_ID: repeating-tests
:END:
*** =@RepeatedTest=
:PROPERTIES:
:CUSTOM_ID: repeatedtest
:END:
- Repeat a test
- Fixed number of repetitions
- Full support of lifecycle

*** Custom Display Name
:PROPERTIES:
:CUSTOM_ID: custom-display-name
:END:
Placeholders

#+begin_src java
{displayName}
{currentRepetition}
{totalRepetitions}
#+end_src

Predefined formats

#+begin_src java
RepeatedTest.LONG_DISPLAY_NAME
{displayName} :: repetition {currentRepetition} of {totalRepetitions}
Ex: My Test :: repetition 1 of 10

RepeatedTest.SHORT_DISPLAY_NAME
repetition {currentRepetition} of {totalRepetitions}
Ex: repetition 1 of 10
#+end_src

RepetitionInfo Interface

- =@RepeatedTest=
- =@FeforeEach=
- =@AfterEach=
